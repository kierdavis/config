// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go runtime

package runtime

_#lockRank: int

_#lockRankDummy: _#lockRank & 0

// Locks held above sched
_#lockRankSysmon:        _#lockRank & 1
_#lockRankScavenge:      _#lockRank & 2
_#lockRankForcegc:       _#lockRank & 3
_#lockRankSweepWaiters:  _#lockRank & 4
_#lockRankAssistQueue:   _#lockRank & 5
_#lockRankCpuprof:       _#lockRank & 6
_#lockRankSweep:         _#lockRank & 7
_#lockRankPollDesc:      _#lockRank & 8
_#lockRankSched:         _#lockRank & 9
_#lockRankDeadlock:      _#lockRank & 10
_#lockRankAllg:          _#lockRank & 11
_#lockRankAllp:          _#lockRank & 12
_#lockRankTimers:        _#lockRank & 13
_#lockRankItab:          _#lockRank & 14
_#lockRankReflectOffs:   _#lockRank & 15
_#lockRankHchan:         _#lockRank & 16
_#lockRankTraceBuf:      _#lockRank & 17
_#lockRankFin:           _#lockRank & 18
_#lockRankNotifyList:    _#lockRank & 19
_#lockRankTraceStrings:  _#lockRank & 20
_#lockRankMspanSpecial:  _#lockRank & 21
_#lockRankProfInsert:    _#lockRank & 22
_#lockRankProfBlock:     _#lockRank & 23
_#lockRankProfMemActive: _#lockRank & 24
_#lockRankProfMemFuture: _#lockRank & 25
_#lockRankGcBitsArenas:  _#lockRank & 26
_#lockRankRoot:          _#lockRank & 27
_#lockRankTrace:         _#lockRank & 28
_#lockRankTraceStackTab: _#lockRank & 29
_#lockRankNetpollInit:   _#lockRank & 30
_#lockRankRwmutexW:      _#lockRank & 31
_#lockRankRwmutexR:      _#lockRank & 32
_#lockRankSpanSetSpine:  _#lockRank & 33
_#lockRankGscan:         _#lockRank & 34
_#lockRankStackpool:     _#lockRank & 35
_#lockRankStackLarge:    _#lockRank & 36
_#lockRankDefer:         _#lockRank & 37
_#lockRankSudog:         _#lockRank & 38

// Memory-related non-leaf locks
_#lockRankWbufSpans:    _#lockRank & 39
_#lockRankMheap:        _#lockRank & 40
_#lockRankMheapSpecial: _#lockRank & 41

// Memory-related leaf locks
_#lockRankGlobalAlloc:   _#lockRank & 42
_#lockRankPageAllocScav: _#lockRank & 43

// Other leaf locks
_#lockRankGFree: _#lockRank & 44

// Generally, hchan must be acquired before gscan. But in one specific
// case (in syncadjustsudogs from markroot after the g has been suspended
// by suspendG), we allow gscan to be acquired, and then an hchan lock. To
// allow this case, we get this lockRankHchanLeaf rank in
// syncadjustsudogs(), rather than lockRankHchan. By using this special
// rank, we don't allow any further locks to be acquired other than more
// hchan locks.
_#lockRankHchanLeaf: _#lockRank & 45
_#lockRankPanic:     _#lockRank & 46

// Leaf locks with no dependencies, so these constants are not actually used anywhere.
// There are other architecture-dependent leaf locks as well.
_#lockRankNewmHandoff:   _#lockRank & 47
_#lockRankDebugPtrmask:  _#lockRank & 48
_#lockRankFaketimeState: _#lockRank & 49
_#lockRankTicks:         _#lockRank & 50
_#lockRankRaceFini:      _#lockRank & 51
_#lockRankPollCache:     _#lockRank & 52
_#lockRankDebug:         _#lockRank & 53

_#lockRankLeafRank: _#lockRank & 1000
