// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go runtime

package runtime

// StackSystem is a number of additional bytes to add
// to each stack below the usual guard area for OS-specific
// purposes like signal handling. Used on Windows, Plan 9,
// and iOS because they do not use a separate stack.
_#_StackSystem: 0

// The minimum size of stack used by Go code
_#_StackMin: 2048

// The minimum stack size to allocate.
// The hackery here rounds FixedStack0 up to a power of 2.
_#_FixedStack0: 2048
_#_FixedStack1: 2047
_#_FixedStack2: 2047
_#_FixedStack3: 2047
_#_FixedStack4: 2047
_#_FixedStack5: 2047
_#_FixedStack6: 2047
_#_FixedStack:  2048

// Functions that need frames bigger than this use an extra
// instruction to do the stack split check, to avoid overflow
// in case SP - framesize wraps below zero.
// This value can be no bigger than the size of the unmapped
// space at zero.
_#_StackBig: 4096

// The stack guard is a pointer this many bytes above the
// bottom of the stack.
//
// The guard leaves enough room for one _StackSmall frame plus
// a _StackLimit chain of NOSPLIT calls plus _StackSystem
// bytes for the OS.
_#_StackGuard: 928

// After a stack split check the SP is allowed to be this
// many bytes below the stack guard. This saves an instruction
// in the checking sequence for tiny frames.
_#_StackSmall: 128

// The maximum number of bytes that a chain of NOSPLIT
// functions can use.
_#_StackLimit: 800

// stackDebug == 0: no logging
//            == 1: logging of per-stack operations
//            == 2: logging of per-frame operations
//            == 3: logging of per-word updates
//            == 4: logging of per-word reads
_#stackDebug:       0
_#stackFromSystem:  0
_#stackFaultOnFree: 0
_#stackPoisonCopy:  0
_#stackNoCache:     0

// check the BP links during traceback.
_#debugCheckBP: false

_#uintptrMask: 18446744073709551615

// Goroutine preemption request.
// 0xfffffade in hex.
_#stackPreempt: 18446744073709550302

// Thread is forking. Causes a split stack check failure.
// 0xfffffb2e in hex.
_#stackFork: 18446744073709550382

// Force a stack movement. Used for debugging.
// 0xfffffeed in hex.
_#stackForceMove: 18446744073709551341

// stackPoisonMin is the lowest allowed stack poison value.
_#stackPoisonMin: 18446744073709547520
