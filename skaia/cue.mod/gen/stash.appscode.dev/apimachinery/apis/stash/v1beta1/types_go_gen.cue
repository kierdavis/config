// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go stash.appscode.dev/apimachinery/apis/stash/v1beta1

package v1beta1

import (
	core "k8s.io/api/core/v1"
	ofst "kmodules.xyz/offshoot-api/api/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupInvokerRef contains information that points to the backup configuration or batch being used
#BackupInvokerRef: {
	// APIGroup is the group for the resource being referenced
	// +optional
	apiGroup?: string @go(APIGroup)

	// Kind is the type of resource being referenced
	kind: string @go(Kind)

	// Name is the name of resource being referenced
	name: string @go(Name)
}

// Param declares a value to use for the Param called Name.
#Param: {
	name:  string @go(Name)
	value: string @go(Value)
}

#TaskRef: {
	// Name specifies the name of the Task to use for backup/restore purpose. If your database has been deployed with KubeDB,
	// then keep this field empty. Stash will read the Task info from the respective AppBinding.
	// +optional
	name?: string @go(Name)

	// Params specifies a list of parameter to pass to the Task. Stash will use this parameters to resolve the task.
	// +optional
	params?: [...#Param] @go(Params,[]Param)
}

#BackupTarget: {
	// Alias represents the identifier of the backed up data in the repository.
	// This will be used as `hostname` or will be used to generate the `hostname` for the restic repository.
	// +optional
	alias?: string @go(Alias)

	// Ref refers to the backup target
	ref?: #TargetRef @go(Ref)

	// Paths specify the file paths to backup
	// +optional
	paths?: [...string] @go(Paths,[]string)

	// VolumeMounts specifies the volumes to mount inside stash sidecar/init container
	// Specify the volumes that contains the target directories
	// +optional
	volumeMounts?: [...core.#VolumeMount] @go(VolumeMounts,[]core.VolumeMount)

	// replicas are the desired number of replicas whose data should be backed up.
	// If unspecified, defaults to 1.
	// +optional
	replicas?: null | int32 @go(Replicas,*int32)

	// Name of the VolumeSnapshotClass used by the VolumeSnapshot. If not specified, a default snapshot class will be used if it is available.
	// Use this field only if the "driver" field is set to "volumeSnapshotter".
	// +optional
	snapshotClassName?: string @go(VolumeSnapshotClassName)

	// Exclude specifies a list of patterns for the files to ignore during backup.
	// Stash will ignore those files that match the specified patterns.
	// Supported only for "Restic" driver
	// +optional
	exclude?: [...string] @go(Exclude,[]string)

	// Args specifies a list of arguments to pass to the backup driver.
	// +optional
	args?: [...string] @go(Args,[]string)
}

#RestoreTarget: {
	// Alias represents the identifier of the backed up data in the repository.
	// This will be used as `sourceHost` and `targetHosts` or will be used to generate them.
	// +optional
	alias?: string @go(Alias)

	// Ref refers to the restore,target
	ref?: #TargetRef @go(Ref)

	// VolumeMounts specifies the volumes to mount inside stash sidecar/init container
	// Specify the volumes that contains the target directories
	// +optional
	volumeMounts?: [...core.#VolumeMount] @go(VolumeMounts,[]core.VolumeMount)

	// replicas is the desired number of replicas of the given Template.
	// These are replicas in the sense that they are instantiations of the
	// same Template, but individual replicas also have a consistent identity.
	// If unspecified, defaults to 1.
	// +optional
	replicas?: null | int32 @go(Replicas,*int32)

	// volumeClaimTemplates is a list of claims that will be created while restore from VolumeSnapshot
	// +optional
	volumeClaimTemplates?: [...ofst.#PersistentVolumeClaim] @go(VolumeClaimTemplates,[]ofst.PersistentVolumeClaim)

	// Rules specifies different restore options for different hosts
	// +optional
	rules?: [...#Rule] @go(Rules,[]Rule)

	// Args specifies a list of arguments to pass to the restore driver.
	// +optional
	args?: [...string] @go(Args,[]string)
}

#Rule: {
	// Subjects specifies the list of hosts that are subject to this rule
	// +optional
	targetHosts?: [...string] @go(TargetHosts,[]string)

	// SourceHost specifies the name of the host whose backed up state we are trying to restore
	// By default, it will indicate the workload itself
	// +optional
	sourceHost?: string @go(SourceHost)

	// Snapshots specifies the list of snapshots that will be restored for the host under this rule.
	// Don't specify if you have specified paths field.
	// +optional
	snapshots?: [...string] @go(Snapshots,[]string)

	// Paths specifies the paths to be restored for the hosts under this rule.
	// Don't specify if you have specified snapshots field.
	// +optional
	paths?: [...string] @go(Paths,[]string)

	// Exclude specifies a list of patterns for the files to ignore during restore.
	// Stash will only restore the files that does not match those patterns.
	// Supported only for "Restic" driver
	// +optional
	exclude?: [...string] @go(Exclude,[]string)

	// Include specifies a list of patterns for the files to restore.
	// Stash will only restore the files that match those patterns.
	// Supported only for "Restic" driver
	// +optional
	include?: [...string] @go(Include,[]string)
}

#TargetRef: {
	apiVersion?: string @go(APIVersion)
	kind?:       string @go(Kind)
	name?:       string @go(Name)

	// +optional
	namespace?: string @go(Namespace)
}

#ExecutionOrder: string // #enumExecutionOrder

#enumExecutionOrder:
	#Parallel |
	#Sequential

#Parallel:   #ExecutionOrder & "Parallel"
#Sequential: #ExecutionOrder & "Sequential"

#RetryConfig: {
	// MaxRetry specifies the maximum number of attempts Stash should retry. Default value: 1
	// +kubebuilder:default=1
	maxRetry?: int32 @go(MaxRetry)

	// The amount of time to wait before next retry. If you don't specify this field, Stash will retry immediately.
	// Format: 30s, 2m, 1h etc.
	// +optional
	delay?: metav1.#Duration @go(Delay)
}
