// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go stash.appscode.dev/apimachinery/apis/stash/v1beta1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	ofst "kmodules.xyz/offshoot-api/api/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"stash.appscode.dev/apimachinery/apis/stash/v1alpha1"
)

#ResourceKindBackupBatch:     "BackupBatch"
#ResourceSingularBackupBatch: "backupbatch"
#ResourcePluralBackupBatch:   "backupbatches"

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=backupbatches,singular=backupbatch,categories={stash,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Schedule",type="string",JSONPath=".spec.schedule"
// +kubebuilder:printcolumn:name="Paused",type="boolean",JSONPath=".spec.paused"
// +kubebuilder:printcolumn:name="Phase",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
#BackupBatch: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #BackupBatchSpec   @go(Spec)
	status?:   #BackupBatchStatus @go(Status)
}

#BackupBatchSpec: {
	// members is a list of backup configurations that are part of this batch
	// +optional
	members?: [...#BackupConfigurationTemplateSpec] @go(Members,[]BackupConfigurationTemplateSpec)

	// Schedule specifies the schedule for invoking backup sessions
	// +optional
	schedule?: string @go(Schedule)

	// RuntimeSettings allow to specify Resources, NodeSelector, Affinity, Toleration, ReadinessProbe etc,
	// and used to create service account for CronJob.
	// +optional
	runtimeSettings?: ofst.#RuntimeSettings @go(RuntimeSettings)

	// Driver indicates the name of the agent to use to backup the target.
	// Supported values are "Restic", "VolumeSnapshotter".
	// Default value is "Restic".
	// +optional
	// +kubebuilder:default=Restic
	driver?: #Snapshotter @go(Driver)

	// Repository refer to the Repository crd that holds backend information
	// +optional
	repository?: kmapi.#ObjectReference @go(Repository)

	// RetentionPolicy indicates the policy to follow to clean old backup snapshots
	retentionPolicy: v1alpha1.#RetentionPolicy @go(RetentionPolicy)

	// Indicates that the BackupConfiguration is paused from taking backup. Default value is 'false'
	// +optional
	paused?: bool @go(Paused)

	// BackupHistoryLimit specifies the number of BackupSession and it's associate resources to keep.
	// This is helpful for debugging purpose.
	// Default: 1
	// +optional
	backupHistoryLimit?: null | int32 @go(BackupHistoryLimit,*int32)

	// Actions that Stash should take in response to backup sessions.
	// Cannot be updated.
	// +optional
	hooks?: null | #BackupHooks @go(Hooks,*BackupHooks)

	// ExecutionOrder indicate whether to backup the members in the sequential order as they appear in the members list.
	// The default value is "Parallel" which means the members will be backed up in parallel.
	// +kubebuilder:default=Parallel
	// +optional
	executionOrder?: #ExecutionOrder @go(ExecutionOrder)

	// TimeOut specifies the maximum duration of backup. BackupBatch will be considered Failed
	// if backup does not complete within this time limit. By default, Stash don't set any timeout for backup.
	// +optional
	timeOut?: null | metav1.#Duration @go(TimeOut,*metav1.Duration)

	// RetryConfig specify a configuration for retry a backup if it fails.
	// By default, Stash does not retry any failed backup.
	// +optional
	retryConfig?: null | #RetryConfig @go(RetryConfig,*RetryConfig)
}

#BackupBatchStatus: {
	// ObservedGeneration is the most recent generation observed for this BackupBatch. It corresponds to the
	// BackupBatch's generation, which is updated on mutation by the API Server.
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// Conditions shows current backup setup condition of the BackupBatch.
	// +optional
	conditions?: [...kmapi.#Condition] @go(Conditions,[]kmapi.Condition)

	// MemberConditions shows current backup setup condition of the members of the BackupBatch.
	// +optional
	memberConditions?: [...#MemberConditions] @go(MemberConditions,[]MemberConditions)

	// Phase indicates phase of this BackupBatch.
	// +optional
	phase?: #BackupInvokerPhase @go(Phase)
}

#MemberConditions: {
	// Target is the reference to the respective target whose condition is shown here.
	target: #TargetRef @go(Target)

	// Conditions shows current backup setup condition of this member.
	// +optional
	conditions?: [...kmapi.#Condition] @go(Conditions,[]kmapi.Condition)
}

#BackupBatchList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items?: [...#BackupBatch] @go(Items,[]BackupBatch)
}

// GlobalPreBackupHookSucceeded indicates whether the global PreBackupHook was executed successfully or not
#GlobalPreBackupHookSucceeded: "GlobalPreBackupHookSucceeded"

// GlobalPostBackupHookSucceeded indicates whether the global PostBackupHook was executed successfully or not
#GlobalPostBackupHookSucceeded: "GlobalPostBackupHookSucceeded"

// GlobalPreBackupHookExecutedSuccessfully indicates that the condition transitioned to this state because the global PreBackupHook was executed successfully
#GlobalPreBackupHookExecutedSuccessfully: "GlobalPreBackupHookExecutedSuccessfully"

// GlobalPreBackupHookExecutionFailed indicates that the condition transitioned to this state because the Stash was unable to execute global PreBackupHook
#GlobalPreBackupHookExecutionFailed: "GlobalPreBackupHookExecutionFailed"

// GlobalPostBackupHookExecutedSuccessfully indicates that the condition transitioned to this state because the global PostBackupHook was executed successfully
#GlobalPostBackupHookExecutedSuccessfully: "GlobalPostBackupHookExecutedSuccessfully"

// GlobalPostBackupHookExecutionFailed indicates that the condition transitioned to this state because the Stash was unable to execute global PostBackupHook
#GlobalPostBackupHookExecutionFailed: "GlobalPostBackupHookExecutionFailed"
