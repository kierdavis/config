// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go stash.appscode.dev/apimachinery/apis/stash/v1beta1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"stash.appscode.dev/apimachinery/apis/stash/v1alpha1"
	ofst "kmodules.xyz/offshoot-api/api/v1"
)

#ResourceKindBackupBlueprint:     "BackupBlueprint"
#ResourcePluralBackupBlueprint:   "backupblueprints"
#ResourceSingularBackupBlueprint: "backupblueprint"

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=backupblueprints,singular=backupblueprint,scope=Cluster,shortName=bb,categories={stash,appscode}
// +kubebuilder:printcolumn:name="Task",type="string",JSONPath=".spec.task.name"
// +kubebuilder:printcolumn:name="Schedule",type="string",JSONPath=".spec.schedule"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
#BackupBlueprint: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta   @go(ObjectMeta)
	spec?:     #BackupBlueprintSpec @go(Spec)
}

#BackupBlueprintSpec: {
	v1alpha1.#RepositorySpec

	// BackupNamespace specifies the namespace where the backup resources (i.e. BackupConfiguration, BackupSession, Job, Repository etc.) will be created.
	// If you don't provide this field, then the backup resources will be created in the target namespace.
	// +optional
	backupNamespace?: string @go(BackupNamespace)

	// RepoNamespace lets you specify the namespace for the Repositories. If this field is not specified, Stash will create the Repository
	// in the namespace pointed by the backupNamespace field. If neither of the backupNamespace and repoNamespace is specified,
	// Stash will create the Repository in the target namespace.
	// +optional
	repoNamespace?: string @go(RepoNamespace)

	// Schedule specifies the default schedule for backup.
	// You can overwrite this schedule for a particular target using 'stash.appscode.com/schedule' annotation.
	schedule?: string @go(Schedule)

	// Task specify the Task crd that specifies steps for backup process
	// +optional
	task?: #TaskRef @go(Task)

	// RetentionPolicy indicates the policy to follow to clean old backup snapshots
	retentionPolicy: v1alpha1.#RetentionPolicy @go(RetentionPolicy)

	// RuntimeSettings allow to specify Resources, NodeSelector, Affinity, Toleration, ReadinessProbe etc.
	// +optional
	runtimeSettings?: ofst.#RuntimeSettings @go(RuntimeSettings)

	// Temp directory configuration for functions/sidecar
	// An `EmptyDir` will always be mounted at /tmp with this settings
	// +optional
	tempDir?: #EmptyDirSettings @go(TempDir)

	// InterimVolumeTemplate specifies a template for a volume to hold targeted data temporarily
	// before uploading to backend or inserting into target. It is only usable for job model.
	// Don't specify it in sidecar model.
	// +optional
	interimVolumeTemplate?: null | ofst.#PersistentVolumeClaim @go(InterimVolumeTemplate,*ofst.PersistentVolumeClaim)

	// Hooks specifies the actions Stash should execute before or after backup.
	// +optional
	hooks?: null | #BackupHooks @go(Hooks,*BackupHooks)

	// BackupHistoryLimit specifies the number of BackupSession and it's associate resources to keep.
	// This is helpful for debugging purpose.
	// Default: 1
	// +optional
	backupHistoryLimit?: null | int32 @go(BackupHistoryLimit,*int32)

	// TimeOut specifies the maximum duration of backup. BackupSession will be considered Failed
	// if backup does not complete within this time limit. By default, Stash don't set any timeout for backup.
	// +optional
	timeOut?: null | metav1.#Duration @go(TimeOut,*metav1.Duration)

	// RetryConfig specify a configuration for retry a backup if it fails.
	// By default, Stash does not retry any failed backup.
	// +optional
	retryConfig?: null | #RetryConfig @go(RetryConfig,*RetryConfig)
}

#BackupBlueprintList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items?: [...#BackupBlueprint] @go(Items,[]BackupBlueprint)
}
