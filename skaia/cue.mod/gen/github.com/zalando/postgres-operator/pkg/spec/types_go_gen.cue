// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/zalando/postgres-operator/pkg/spec

package spec

import (
	"time"
	"github.com/sirupsen/logrus"
)

// NamespacedName describes the namespace/name pairs used in Kubernetes names.
#NamespacedName: _

_#fileWithNamespace: "/var/run/secrets/kubernetes.io/serviceaccount/namespace"

// RoleOrigin contains the code of the origin of a role
#RoleOrigin: int // #enumRoleOrigin

#enumRoleOrigin:
	#RoleOriginUnknown |
	#RoleOriginManifest |
	#RoleOriginInfrastructure |
	#RoleOriginTeamsAPI |
	#RoleOriginSystem |
	#RoleOriginBootstrap |
	#RoleOriginConnectionPooler |
	#RoleOriginStream

#values_RoleOrigin: {
	RoleOriginUnknown:          #RoleOriginUnknown
	RoleOriginManifest:         #RoleOriginManifest
	RoleOriginInfrastructure:   #RoleOriginInfrastructure
	RoleOriginTeamsAPI:         #RoleOriginTeamsAPI
	RoleOriginSystem:           #RoleOriginSystem
	RoleOriginBootstrap:        #RoleOriginBootstrap
	RoleOriginConnectionPooler: #RoleOriginConnectionPooler
	RoleOriginStream:           #RoleOriginStream
}

#RoleOriginUnknown:          #RoleOrigin & 0
#RoleOriginManifest:         #RoleOrigin & 1
#RoleOriginInfrastructure:   #RoleOrigin & 2
#RoleOriginTeamsAPI:         #RoleOrigin & 3
#RoleOriginSystem:           #RoleOrigin & 4
#RoleOriginBootstrap:        #RoleOrigin & 5
#RoleOriginConnectionPooler: #RoleOrigin & 6
#RoleOriginStream:           #RoleOrigin & 7

_#syncUserOperation: int

#PGSyncUserAdd:    0
#PGsyncUserAlter:  1
#PGSyncAlterSet:   2
#PGSyncUserRename: 3

// PgUser contains information about a single user.
#PgUser: {
	user_flags: [...string] @go(Flags,[]string)
	inrole: [...string] @go(MemberOf,[]string)
	db_parameters: {[string]: string} @go(Parameters,map[string]string)
	admin_role:  string @go(AdminRole)
	is_db_owner: bool   @go(IsDbOwner)
	deleted:     bool   @go(Deleted)
	rotated:     bool   @go(Rotated)
}

// PgUserMap maps user names to the definitions.
#PgUserMap: {[string]: #PgUser}

// PgSyncUserRequest has information about a single request to sync a user.
#PgSyncUserRequest: {
	Kind: _#syncUserOperation
	User: #PgUser
}

// UserSyncer defines an interface for the implementations to sync users from the manifest to the DB.
#UserSyncer: _

// LogEntry describes log entry in the RingLogger
#LogEntry: {
	Time:         time.Time
	Level:        logrus.#Level
	ClusterName?: null | #NamespacedName @go(,*NamespacedName)
	Worker?:      null | uint32          @go(,*uint32)
	Message:      string
}

// Diff describes diff
#Diff: {
	EventTime:   time.Time
	ProcessTime: time.Time
	Diff: [...string] @go(,[]string)
}

// ControllerStatus describes status of the controller
#ControllerStatus: {
	LastSyncTime: int64
	Clusters:     int
}

// QueueDump describes cache.FIFO queue
#QueueDump: {
	Keys: [...string] @go(,[]string)
	List: [...] @go(,[]interface{})
}

// ControllerConfig describes configuration of the controller
#ControllerConfig: {
	InfrastructureRoles: {[string]: #PgUser} @go(,map[string]PgUser)
	NoDatabaseAccess:     bool
	NoTeamsAPI:           bool
	CRDReadyWaitInterval: time.#Duration
	CRDReadyWaitTimeout:  time.#Duration
	ConfigMapName:        #NamespacedName
	Namespace:            string
	IgnoredAnnotations: [...string] @go(,[]string)
	EnableJsonLogging: bool
}
