// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/kube-object-storage/lib-bucket-provisioner/pkg/apis/objectbucket.io/v1alpha1

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ObjectBucketKind: "ObjectBucket"

_#mapper: _

#AwsKeyField:        "AWS_ACCESS_KEY_ID"
#AwsSecretField:     "AWS_SECRET_ACCESS_KEY"
#StorageClassBucket: "bucketName"

// AccessKeys is an Authentication type for passing AWS S3 style key pairs from the provisioner to the reconciler
#AccessKeys: {
}

// Authentication wraps all supported auth types.  The design choice enables expansion of supported types while
// protecting backwards compatibility.
#Authentication: {
}

// Endpoint contains all connection relevant data that an app may require for accessing
// the bucket
#Endpoint: {
	bucketHost: string @go(BucketHost)
	bucketPort: int    @go(BucketPort)
	bucketName: string @go(BucketName)
	region:     string @go(Region)
	subRegion:  string @go(SubRegion)
	additionalConfig: {[string]: string} @go(AdditionalConfigData,map[string]string)
}

// Connection encapsulates Endpoint and Authentication data to simplify the expected return values of the Provision()
// interface method.  This makes it more clear to library consumers what specific values they should return from their
// Provisioner interface implementation.
#Connection: {
	endpoint?: null | #Endpoint @go(Endpoint,*Endpoint)
	additionalState: {[string]: string} @go(AdditionalState,map[string]string)
}

// ObjectBucketSpec defines the desired state of ObjectBucket. Fields defined here should be normal among all providers.
// Authentication must be of a type defined in this package to pass type checks in reconciler
#ObjectBucketSpec: {
	storageClassName: string                                       @go(StorageClassName)
	reclaimPolicy?:   null | corev1.#PersistentVolumeReclaimPolicy @go(ReclaimPolicy,*corev1.PersistentVolumeReclaimPolicy)
	claimRef?:        null | corev1.#ObjectReference               @go(ClaimRef,*corev1.ObjectReference)

	#Connection
}

// ObjectBucketStatusPhase is set by the controller to save the state of the provisioning process.
#ObjectBucketStatusPhase: string // #enumObjectBucketStatusPhase

#enumObjectBucketStatusPhase:
	#ObjectBucketStatusPhaseBound |
	#ObjectBucketStatusPhaseReleased |
	#ObjectBucketStatusPhaseFailed

// ObjectBucketStatusPhaseBound indicates that the objectBucket has been logically bound to a claim following a
// successful provision.  It is NOT the authority for the status of the claim an object bucket. For that, see
// objectBucketClaim.Spec.ObjectBucketName
#ObjectBucketStatusPhaseBound: #ObjectBucketStatusPhase & "Bound"

// ObjectBucketStatusPhaseReleased indicates that the object bucket was once bound to a claim that has since been deleted
// this phase can occur when the claim is deleted and the reconciler is in the process of either deleting the bucket or
// revoking access to that bucket in the case of brownfield.
#ObjectBucketStatusPhaseReleased: #ObjectBucketStatusPhase & "Released"

// ObjectBucketStatusPhaseFailed TODO this phase does not have a defined reason for existing.  If provisioning fails
//  the OB is cleaned up.  Since we generate OBs for brownfield cases, we also would delete them on failures.  The
//  result is that if this phase is set, the OB would deleted soon after anyway.
#ObjectBucketStatusPhaseFailed: #ObjectBucketStatusPhase & "Failed"

// ObjectBucketStatus defines the observed state of ObjectBucket
#ObjectBucketStatus: {
	phase: #ObjectBucketStatusPhase @go(Phase)
}

// ObjectBucket is the Schema for the objectbuckets API
#ObjectBucket: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta  @go(ObjectMeta)
	spec?:     #ObjectBucketSpec   @go(Spec)
	status?:   #ObjectBucketStatus @go(Status)
}

// ObjectBucketList contains a list of ObjectBucket
#ObjectBucketList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ObjectBucket] @go(Items,[]ObjectBucket)
}
