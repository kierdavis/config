// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go kmodules.xyz/client-go/api/v1

package v1

import (
	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#TLSConfig: {
	// IssuerRef is a reference to a Certificate Issuer.
	// +optional
	issuerRef?: null | core.#TypedLocalObjectReference @go(IssuerRef,*core.TypedLocalObjectReference) @protobuf(1,bytes,opt)

	// Certificate provides server and/or client certificate options used by application pods.
	// These options are passed to a cert-manager Certificate object.
	// xref: https://github.com/jetstack/cert-manager/blob/v0.16.0/pkg/apis/certmanager/v1beta1/types_certificate.go#L82-L162
	// +optional
	certificates?: [...#CertificateSpec] @go(Certificates,[]CertificateSpec) @protobuf(2,bytes,rep)
}

#CertificateSpec: {
	// Alias represents the identifier of the certificate.
	alias: string @go(Alias) @protobuf(1,bytes,opt)

	// IssuerRef is a reference to a Certificate Issuer.
	// +optional
	issuerRef?: null | core.#TypedLocalObjectReference @go(IssuerRef,*core.TypedLocalObjectReference) @protobuf(2,bytes,opt)

	// Specifies the k8s secret name that holds the certificates.
	// Default to <resource-name>-<cert-alias>-cert.
	// +optional
	secretName?: string @go(SecretName) @protobuf(3,bytes,opt)

	// Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
	// +optional
	subject?: null | #X509Subject @go(Subject,*X509Subject) @protobuf(4,bytes,opt)

	// Certificate default Duration
	// +optional
	duration?: null | metav1.#Duration @go(Duration,*metav1.Duration) @protobuf(5,bytes,opt)

	// Certificate renew before expiration duration
	// +optional
	renewBefore?: null | metav1.#Duration @go(RenewBefore,*metav1.Duration) @protobuf(6,bytes,opt)

	// DNSNames is a list of subject alt names to be used on the Certificate.
	// +optional
	dnsNames?: [...string] @go(DNSNames,[]string) @protobuf(7,bytes,rep)

	// IPAddresses is a list of IP addresses to be used on the Certificate
	// +optional
	ipAddresses?: [...string] @go(IPAddresses,[]string) @protobuf(8,bytes,rep)

	// URIs is a list of URI subjectAltNames to be set on the Certificate.
	// +optional
	uris?: [...string] @go(URIs,[]string) @protobuf(9,bytes,rep)

	// EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
	// +optional
	emailAddresses?: [...string] @go(EmailAddresses,[]string) @protobuf(10,bytes,rep)

	// Options to control private keys used for the Certificate.
	// +optional
	privateKey?: null | #CertificatePrivateKey @go(PrivateKey,*CertificatePrivateKey) @protobuf(11,bytes,opt)
}

// X509Subject Full X509 name specification
#X509Subject: {
	// Organizations to be used on the Certificate.
	// +optional
	organizations?: [...string] @go(Organizations,[]string) @protobuf(1,bytes,rep)

	// Countries to be used on the CertificateSpec.
	// +optional
	countries?: [...string] @go(Countries,[]string) @protobuf(2,bytes,rep)

	// Organizational Units to be used on the CertificateSpec.
	// +optional
	organizationalUnits?: [...string] @go(OrganizationalUnits,[]string) @protobuf(3,bytes,rep)

	// Cities to be used on the CertificateSpec.
	// +optional
	localities?: [...string] @go(Localities,[]string) @protobuf(4,bytes,rep)

	// State/Provinces to be used on the CertificateSpec.
	// +optional
	provinces?: [...string] @go(Provinces,[]string) @protobuf(5,bytes,rep)

	// Street addresses to be used on the CertificateSpec.
	// +optional
	streetAddresses?: [...string] @go(StreetAddresses,[]string) @protobuf(6,bytes,rep)

	// Postal codes to be used on the CertificateSpec.
	// +optional
	postalCodes?: [...string] @go(PostalCodes,[]string) @protobuf(7,bytes,rep)

	// Serial number to be used on the CertificateSpec.
	// +optional
	serialNumber?: string @go(SerialNumber) @protobuf(8,bytes,opt)
}

// +kubebuilder:validation:Enum=PKCS1;PKCS8
#PrivateKeyEncoding: string // #enumPrivateKeyEncoding

#enumPrivateKeyEncoding:
	#PKCS1 |
	#PKCS8

// PKCS1 key encoding will produce PEM files that include the type of
// private key as part of the PEM header, e.g. "BEGIN RSA PRIVATE KEY".
// If the keyAlgorithm is set to 'ECDSA', this will produce private keys
// that use the "BEGIN EC PRIVATE KEY" header.
#PKCS1: #PrivateKeyEncoding & "PKCS1"

// PKCS8 key encoding will produce PEM files with the "BEGIN PRIVATE KEY"
// header. It encodes the keyAlgorithm of the private key as part of the
// DER encoded PEM block.
#PKCS8: #PrivateKeyEncoding & "PKCS8"

// CertificatePrivateKey contains configuration options for private keys
// used by the Certificate controller.
// This allows control of how private keys are rotated.
#CertificatePrivateKey: {
	// The private key cryptography standards (PKCS) encoding for this
	// certificate's private key to be encoded in.
	// If provided, allowed values are "pkcs1" and "pkcs8" standing for PKCS#1
	// and PKCS#8, respectively.
	// Defaults to PKCS#1 if not specified.
	// See here for the difference between the formats: https://stackoverflow.com/a/48960291
	// +optional
	encoding?: #PrivateKeyEncoding @go(Encoding) @protobuf(1,bytes,opt,casttype=PrivateKeyEncoding)
}

_#stringSetMerger: {
}
