# Generated by carnix 0.6.5: /nix/store/jvspcx4ynxfhxng60ajbmv9gzgi7d0m4-rust_carnix-0.6.5/bin/carnix --output Cargo.nix crate/Cargo.lock
{ lib, buildPlatform, buildRustCrate, fetchgit }:
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    include = includedFiles: src: builtins.filterSource (path: type:
      lib.lists.any (f:
        let p = toString (src + ("/" + f)); in
        (path == p) || (type == "directory" && lib.strings.hasPrefix path p)
      ) includedFiles
    ) src;
    updateFeatures = f: up: functions: builtins.deepSeq f (lib.lists.foldl' (features: fun: fun features) (lib.attrsets.recursiveUpdate f up) functions);
    mapFeatures = features: map (fun: fun { features = features; });
    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if feat.${featureName} or false then
        [ featureName ] ++ features
      else
        features
    ) [] (builtins.attrNames feat);
in
rec {
  netcheck = f: netcheck_0_1_0 { features = netcheck_0_1_0_features { netcheck_0_1_0 = f; }; };
  arc_swap_0_3_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "arc-swap";
    version = "0.3.11";
    authors = [ "Michal 'vorner' Vaner <vorner@vorner.cz>" ];
    sha256 = "0svh0bj0b89y4vni5pqa37qgwkya3gycjizlwg0bqkq30z5smfpf";
    inherit dependencies buildDependencies features;
  };
  arrayvec_0_4_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "arrayvec";
    version = "0.4.10";
    authors = [ "bluss" ];
    sha256 = "0qbh825i59w5wfdysqdkiwbwkrsy7lgbd4pwbyb8pxx8wc36iny8";
    inherit dependencies buildDependencies features;
  };
  autocfg_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "autocfg";
    version = "0.1.2";
    authors = [ "Josh Stone <cuviper@gmail.com>" ];
    sha256 = "0dv81dwnp1al3j4ffz007yrjv4w1c7hw09gnf0xs3icxiw6qqfs3";
    inherit dependencies buildDependencies features;
  };
  bitflags_1_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bitflags";
    version = "1.0.4";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1g1wmz2001qmfrd37dnd5qiss5njrw26aywmg6yhkmkbyrhjxb08";
    inherit dependencies buildDependencies features;
  };
  byteorder_1_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "byteorder";
    version = "1.3.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1dd46l7fvmxfq90kh6ip1ghsxzzcdybac8f0mh2jivsdv9vy8k4w";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  bytes_0_4_12_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bytes";
    version = "0.4.12";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0cw577vll9qp0h3l1sy24anr5mcnd5j26q9q7nw4f0mddssvfphf";
    inherit dependencies buildDependencies features;
  };
  cfg_if_0_1_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cfg-if";
    version = "0.1.7";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "13gvcx1dxjq4mpmpj26hpg3yc97qffkx2zi58ykr1dwr8q2biiig";
    inherit dependencies buildDependencies features;
  };
  cloudabi_0_0_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cloudabi";
    version = "0.0.3";
    authors = [ "Nuxi (https://nuxi.nl/) and contributors" ];
    sha256 = "1z9lby5sr6vslfd14d6igk03s7awf91mxpsfmsp3prxbxlk0x7h5";
    libPath = "cloudabi.rs";
    inherit dependencies buildDependencies features;
  };
  crossbeam_deque_0_7_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-deque";
    version = "0.7.1";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "11l7idrx3diksrxbaa13f9h9i6f3456qq3647f3kglxfjmz9bm8s";
    inherit dependencies buildDependencies features;
  };
  crossbeam_epoch_0_7_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-epoch";
    version = "0.7.1";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "1n2p8rqsg0g8dws6kvjgi5jsbnd42l45dklnzc8vihjcxa6712bg";
    inherit dependencies buildDependencies features;
  };
  crossbeam_queue_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-queue";
    version = "0.1.2";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "1hannzr5w6j5061kg5iba4fzi6f2xpqv7bkcspfq17y1i8g0mzjj";
    inherit dependencies buildDependencies features;
  };
  crossbeam_utils_0_6_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-utils";
    version = "0.6.5";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "1z7wgcl9d22r2x6769r5945rnwf3jqfrrmb16q7kzk292r1d4rdg";
    inherit dependencies buildDependencies features;
  };
  fnv_1_0_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fnv";
    version = "1.0.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "128mlh23y3gg6ag5h8iiqlcbl59smisdzraqy88ldrf75kbw27ip";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  fuchsia_cprng_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-cprng";
    version = "0.1.1";
    authors = [ "Erick Tryzelaar <etryzelaar@google.com>" ];
    sha256 = "07apwv9dj716yjlcj29p94vkqn5zmfh7hlrqvrjx3wzshphc95h9";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "0jrf4shb1699r4la8z358vri8318w4mdi6qzfqy30p2ymjlca4gk";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_sys_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon-sys";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "08jp1zxrm9jbrr6l26bjal4dbm8bxfy57ickdgibsqxr1n9j3hf5";
    inherit dependencies buildDependencies features;
  };
  futures_0_1_26_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "futures";
    version = "0.1.26";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0b2v05xp3pq0idw743824ilgl9mfn6bf0sf9zm98g07zz4hqzpzs";
    inherit dependencies buildDependencies features;
  };
  iovec_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "iovec";
    version = "0.1.2";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0vjymmb7wj4v4kza5jjn48fcdb85j3k37y7msjl3ifz0p9yiyp2r";
    inherit dependencies buildDependencies features;
  };
  kernel32_sys_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "kernel32-sys";
    version = "0.2.2";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lrw1hbinyvr6cp28g60z97w32w8vsk6pahk64pmrv2fmby8srfj";
    libName = "kernel32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  lazy_static_1_3_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazy_static";
    version = "1.3.0";
    authors = [ "Marvin LÃ¶bel <loebel.marvin@gmail.com>" ];
    sha256 = "1vv47va18ydk7dx5paz88g3jy1d3lwbx6qpxkbj8gyfv770i4b1y";
    inherit dependencies buildDependencies features;
  };
  lazycell_1_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazycell";
    version = "1.2.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Nikita Pekin <contact@nikitapek.in>" ];
    sha256 = "1m4h2q9rgxrgc7xjnws1x81lrb68jll8w3pykx1a9bhr29q2mcwm";
    inherit dependencies buildDependencies features;
  };
  libc_0_2_53_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libc";
    version = "0.2.53";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1xll5wv9lyg96h80p5ph27igrdnw3y19rdid6g6vpvc42h5mkkwc";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  lock_api_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lock_api";
    version = "0.1.5";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "132sidr5hvjfkaqm3l95zpcpi8yk5ddd0g79zf1ad4v65sxirqqm";
    inherit dependencies buildDependencies features;
  };
  log_0_4_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "log";
    version = "0.4.6";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1nd8dl9mvc9vd6fks5d4gsxaz990xi6rzlb8ymllshmwi153vngr";
    inherit dependencies buildDependencies features;
  };
  memoffset_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "memoffset";
    version = "0.2.1";
    authors = [ "Gilad Naaman <gilad.naaman@gmail.com>" ];
    sha256 = "00vym01jk9slibq2nsiilgffp7n6k52a4q3n4dqp0xf5kzxvffcf";
    inherit dependencies buildDependencies features;
  };
  mio_0_6_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mio";
    version = "0.6.16";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "14vyrlmf0w984pi7ad9qvmlfj6vrb0wn6i8ik9j87w5za2r3rban";
    inherit dependencies buildDependencies features;
  };
  mio_named_pipes_0_1_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mio-named-pipes";
    version = "0.1.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "016r9rjh8yq94rs8vn7z4jasx08z1q06jfwcvg39bihfyar4gsfx";
    inherit dependencies buildDependencies features;
  };
  mio_uds_0_6_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mio-uds";
    version = "0.6.7";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1gff9908pvvysv7zgxvyxy7x34fnhs088cr0j8mgwj8j24mswrhm";
    inherit dependencies buildDependencies features;
  };
  miow_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "miow";
    version = "0.2.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "14f8zkc6ix7mkyis1vsqnim8m29b6l55abkba3p2yz7j1ibcvrl0";
    inherit dependencies buildDependencies features;
  };
  miow_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "miow";
    version = "0.3.3";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1mlk5mn00cl6bmf8qlpc6r85dxf4l45vbkbzshsr1mrkb3hn1j57";
    inherit dependencies buildDependencies features;
  };
  net2_0_2_33_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "net2";
    version = "0.2.33";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1qnmajafgybj5wyxz9iffa8x5wgbwd2znfklmhqj7vl6lw1m65mq";
    inherit dependencies buildDependencies features;
  };
  netcheck_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "netcheck";
    version = "0.1.0";
    authors = [ "Kier Davis <kierdavis@gmail.com>" ];
    src = ./crate;
    inherit dependencies buildDependencies features;
  };
  nodrop_0_1_13_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "nodrop";
    version = "0.1.13";
    authors = [ "bluss" ];
    sha256 = "0gkfx6wihr9z0m8nbdhma5pyvbipznjpkzny2d4zkc05b0vnhinb";
    inherit dependencies buildDependencies features;
  };
  num_cpus_1_10_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num_cpus";
    version = "1.10.0";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1411jyxy1wd8d59mv7cf6ynkvvar92czmwhb9l2c1brdkxbbiqn7";
    inherit dependencies buildDependencies features;
  };
  owning_ref_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "owning_ref";
    version = "0.4.0";
    authors = [ "Marvin LÃ¶bel <loebel.marvin@gmail.com>" ];
    sha256 = "1m95qpc3hamkw9wlbfzqkzk7h6skyj40zr6sa3ps151slcfnnchm";
    inherit dependencies buildDependencies features;
  };
  parking_lot_0_7_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "parking_lot";
    version = "0.7.1";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "1qpb49xd176hqqabxdb48f1hvylfbf68rpz8yfrhw0x68ys0lkq1";
    inherit dependencies buildDependencies features;
  };
  parking_lot_core_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "parking_lot_core";
    version = "0.4.0";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "1mzk5i240ddvhwnz65hhjk4cq61z235g1n8bd7al4mg6vx437c16";
    inherit dependencies buildDependencies features;
  };
  rand_0_6_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.6.5";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0zbck48159aj8zrwzf80sd9xxh96w4f4968nshwjpysjvflimvgb";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  rand_chacha_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_chacha";
    version = "0.1.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0xnxm4mjd7wjnh18zxc1yickw58axbycp35ciraplqdfwn1gffwi";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  rand_core_0_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_core";
    version = "0.3.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0q0ssgpj9x5a6fda83nhmfydy7a6c0wvxm0jhncsmjx8qp8gw91m";
    inherit dependencies buildDependencies features;
  };
  rand_core_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_core";
    version = "0.4.0";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0wb5iwhffibj0pnpznhv1g3i7h1fnhz64s3nz74fz6vsm3q6q3br";
    inherit dependencies buildDependencies features;
  };
  rand_hc_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_hc";
    version = "0.1.0";
    authors = [ "The Rand Project Developers" ];
    sha256 = "05agb75j87yp7y1zk8yf7bpm66hc0673r3dlypn0kazynr6fdgkz";
    inherit dependencies buildDependencies features;
  };
  rand_isaac_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_isaac";
    version = "0.1.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "10hhdh5b5sa03s6b63y9bafm956jwilx41s71jbrzl63ccx8lxdq";
    inherit dependencies buildDependencies features;
  };
  rand_jitter_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_jitter";
    version = "0.1.3";
    authors = [ "The Rand Project Developers" ];
    sha256 = "1cb4q73rmh1inlx3liy6rabapcqh6p6c1plsd2lxw6dmi67d1qc3";
    inherit dependencies buildDependencies features;
  };
  rand_os_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_os";
    version = "0.1.3";
    authors = [ "The Rand Project Developers" ];
    sha256 = "0ywwspizgs9g8vzn6m5ix9yg36n15119d6n792h7mk4r5vs0ww4j";
    inherit dependencies buildDependencies features;
  };
  rand_pcg_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_pcg";
    version = "0.1.2";
    authors = [ "The Rand Project Developers" ];
    sha256 = "04qgi2ai2z42li5h4aawvxbpnlqyjfnipz9d6k73mdnl6p1xq938";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  rand_xorshift_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_xorshift";
    version = "0.1.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0v365c4h4lzxwz5k5kp9m0661s0sss7ylv74if0xb4svis9sswnn";
    inherit dependencies buildDependencies features;
  };
  rdrand_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rdrand";
    version = "0.4.0";
    authors = [ "Simonas Kazlauskas <rdrand@kazlauskas.me>" ];
    sha256 = "15hrcasn0v876wpkwab1dwbk9kvqwrb3iv4y4dibb6yxnfvzwajk";
    inherit dependencies buildDependencies features;
  };
  redox_syscall_0_1_54_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "redox_syscall";
    version = "0.1.54";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "1ndcp7brnvii87ndcd34fk846498r07iznphkslcy0shic9cp4rr";
    libName = "syscall";
    inherit dependencies buildDependencies features;
  };
  rustc_version_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rustc_version";
    version = "0.2.3";
    authors = [ "Marvin LÃ¶bel <loebel.marvin@gmail.com>" ];
    sha256 = "0rgwzbgs3i9fqjm1p4ra3n7frafmpwl29c8lw85kv1rxn7n2zaa7";
    inherit dependencies buildDependencies features;
  };
  scoped_tls_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "scoped-tls";
    version = "0.1.2";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0nblksgki698cqsclsnd6f1pq4yy34350dn2slaah9dlmx9z5xla";
    inherit dependencies buildDependencies features;
  };
  scopeguard_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "scopeguard";
    version = "0.3.3";
    authors = [ "bluss" ];
    sha256 = "0i1l013csrqzfz6c68pr5pi01hg5v5yahq8fsdmaxy6p8ygsjf3r";
    inherit dependencies buildDependencies features;
  };
  semver_0_9_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "semver";
    version = "0.9.0";
    authors = [ "Steve Klabnik <steve@steveklabnik.com>" "The Rust Project Developers" ];
    sha256 = "0azak2lb2wc36s3x15az886kck7rpnksrw14lalm157rg9sc9z63";
    inherit dependencies buildDependencies features;
  };
  semver_parser_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "semver-parser";
    version = "0.7.0";
    authors = [ "Steve Klabnik <steve@steveklabnik.com>" ];
    sha256 = "1da66c8413yakx0y15k8c055yna5lyb6fr0fw9318kdwkrk5k12h";
    inherit dependencies buildDependencies features;
  };
  signal_hook_0_1_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "signal-hook";
    version = "0.1.9";
    authors = [ "Michal 'vorner' Vaner <vorner@vorner.cz>" ];
    sha256 = "090cx7fyrqllvhvxxy5343j4r21i98cs2id63jp7a59yk8d29xsi";
    inherit dependencies buildDependencies features;
  };
  signal_hook_registry_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "signal-hook-registry";
    version = "1.0.0";
    authors = [ "Michal 'vorner' Vaner <vorner@vorner.cz>" ];
    sha256 = "1qvqa6bb67i5i9bx98lvssqwg4f7xvv5d0hv5a9zjfx4nd6a819v";
    inherit dependencies buildDependencies features;
  };
  slab_0_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "slab";
    version = "0.4.2";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0h1l2z7qy6207kv0v3iigdf2xfk9yrhbwj1svlxk6wxjmdxvgdl7";
    inherit dependencies buildDependencies features;
  };
  smallvec_0_6_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "smallvec";
    version = "0.6.9";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "0p96l51a2pq5y0vn48nhbm6qslbc6k8h28cxm0pmzkqmj7xynz6w";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  socket2_0_3_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "socket2";
    version = "0.3.8";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1a71m20jxmf9kqqinksphc7wj1j7q672q29cpza7p9siyzyfx598";
    inherit dependencies buildDependencies features;
  };
  stable_deref_trait_1_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "stable_deref_trait";
    version = "1.1.1";
    authors = [ "Robert Grosse <n210241048576@gmail.com>" ];
    sha256 = "1xy9slzslrzr31nlnw52sl1d820b09y61b7f13lqgsn8n7y0l4g8";
    inherit dependencies buildDependencies features;
  };
  tokio_0_1_19_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio";
    version = "0.1.19";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0ksqs54h69x97zg2df7k069vbxqd7mvdpaws4aahnd05n95afcib";
    inherit dependencies buildDependencies features;
  };
  tokio_codec_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-codec";
    version = "0.1.1";
    authors = [ "Carl Lerche <me@carllerche.com>" "Bryan Burgers <bryan@burgers.io>" ];
    sha256 = "0jc9lik540zyj4chbygg1rjh37m3zax8pd4bwcrwjmi1v56qwi4h";
    inherit dependencies buildDependencies features;
  };
  tokio_core_0_1_17_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-core";
    version = "0.1.17";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1j6c5q3aakvb1hjx4r95xwl5ms8rp19k4qsr6v6ngwbvr6f9z6rs";
    inherit dependencies buildDependencies features;
  };
  tokio_current_thread_0_1_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-current-thread";
    version = "0.1.6";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "07dm43svkrpifkcnv8f5w477cd9260pnkvnps39qkhkf5ixi8fzg";
    inherit dependencies buildDependencies features;
  };
  tokio_executor_0_1_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-executor";
    version = "0.1.7";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0fhaijjh1cybikx0b53292xfi6yzjrmp10ibgikhd6i33svnggq7";
    inherit dependencies buildDependencies features;
  };
  tokio_fs_0_1_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-fs";
    version = "0.1.6";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0v4mkwg7dj0fakzszy7nvr88y0bskwcvsy2w6d4pzmd186b0v640";
    inherit dependencies buildDependencies features;
  };
  tokio_io_0_1_12_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-io";
    version = "0.1.12";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0z64yfcm9i5ci2h9h7npa292plia9kb04xbm7cp0bzp1wsddv91r";
    inherit dependencies buildDependencies features;
  };
  tokio_process_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-process";
    version = "0.2.3";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0jxzkxmg3jxg1gm2q7snv8cwdibynhlbn619pz5k6qf9dq0qg0m3";
    inherit dependencies buildDependencies features;
  };
  tokio_reactor_0_1_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-reactor";
    version = "0.1.9";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "11gpxrykd6lbpj9b26dh4fymzawfxgqdx1pbhc771gxbf8qyj1gc";
    inherit dependencies buildDependencies features;
  };
  tokio_signal_0_2_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-signal";
    version = "0.2.7";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "14fkmzjsqrk2k1f0hay1qf09nz2l4f8xvr8m2vgmlg867fjbvg32";
    inherit dependencies buildDependencies features;
  };
  tokio_sync_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-sync";
    version = "0.1.5";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0yjg2d4pyw9x9yvap3kndf53a55rj73fsx09c91sss92l1szk7vx";
    inherit dependencies buildDependencies features;
  };
  tokio_tcp_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-tcp";
    version = "0.1.3";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "07v5p339660zjy1w73wddagj3n5wa4v7v5gj7hnvw95ka407zvcz";
    inherit dependencies buildDependencies features;
  };
  tokio_threadpool_0_1_14_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-threadpool";
    version = "0.1.14";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0b6m9xvl5m93y1nmdjr161j39f4ialc39qlm4dy8ad376v7ck1kp";
    inherit dependencies buildDependencies features;
  };
  tokio_timer_0_2_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-timer";
    version = "0.2.10";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "17a5irj7ph95l30845vg6hy3igc0k04bhxnqs2qww4v8ix30vbkz";
    inherit dependencies buildDependencies features;
  };
  tokio_trace_core_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-trace-core";
    version = "0.1.0";
    authors = [ "Tokio Contributors <team@tokio.rs>" ];
    sha256 = "1n96fnand06mnqfjhdicxs3qlhj8r1czjisx231hg4lszl3p5kqd";
    inherit dependencies buildDependencies features;
  };
  tokio_udp_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-udp";
    version = "0.1.3";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1g1x499vqvzwy7xfccr32vwymlx25zpmkx8ppqgifzqwrjnncajf";
    inherit dependencies buildDependencies features;
  };
  tokio_uds_0_2_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-uds";
    version = "0.2.5";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1i4d9b4v9a3rza8bi1j2701w6xjvxxdpdaaw2za4h1x9qriq4rv9";
    inherit dependencies buildDependencies features;
  };
  winapi_0_2_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.2.8";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0a45b58ywf12vb7gvj6h3j264nydynmzyqz8d8rqxsj6icqv82as";
    inherit dependencies buildDependencies features;
  };
  winapi_0_3_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.3.7";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1k51gfkp0zqw7nj07y443mscs46icmdhld442s2073niap0kkdr8";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_build_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-build";
    version = "0.1.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lxlpi87rkhxcwp2ykf1ldw3p108hwm24nywf3jfrvmff4rjhqga";
    libName = "build";
    inherit dependencies buildDependencies features;
  };
  winapi_i686_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_x86_64_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  ws2_32_sys_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ws2_32-sys";
    version = "0.2.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1zpy9d9wk11sj17fczfngcj28w4xxjs3b4n036yzpy38dxp4f7kc";
    libName = "ws2_32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  arc_swap_0_3_11 = { features?(arc_swap_0_3_11_features {}) }: arc_swap_0_3_11_ {};
  arc_swap_0_3_11_features = f: updateFeatures f (rec {
    arc_swap_0_3_11.default = (f.arc_swap_0_3_11.default or true);
  }) [];
  arrayvec_0_4_10 = { features?(arrayvec_0_4_10_features {}) }: arrayvec_0_4_10_ {
    dependencies = mapFeatures features ([ nodrop_0_1_13 ]);
    features = mkFeatures (features.arrayvec_0_4_10 or {});
  };
  arrayvec_0_4_10_features = f: updateFeatures f (rec {
    arrayvec_0_4_10.default = (f.arrayvec_0_4_10.default or true);
    arrayvec_0_4_10.serde =
      (f.arrayvec_0_4_10.serde or false) ||
      (f.arrayvec_0_4_10.serde-1 or false) ||
      (arrayvec_0_4_10.serde-1 or false);
    arrayvec_0_4_10.std =
      (f.arrayvec_0_4_10.std or false) ||
      (f.arrayvec_0_4_10.default or false) ||
      (arrayvec_0_4_10.default or false);
    nodrop_0_1_13.default = (f.nodrop_0_1_13.default or false);
  }) [ nodrop_0_1_13_features ];
  autocfg_0_1_2 = { features?(autocfg_0_1_2_features {}) }: autocfg_0_1_2_ {};
  autocfg_0_1_2_features = f: updateFeatures f (rec {
    autocfg_0_1_2.default = (f.autocfg_0_1_2.default or true);
  }) [];
  bitflags_1_0_4 = { features?(bitflags_1_0_4_features {}) }: bitflags_1_0_4_ {
    features = mkFeatures (features.bitflags_1_0_4 or {});
  };
  bitflags_1_0_4_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = (f.bitflags_1_0_4.default or true);
  }) [];
  byteorder_1_3_1 = { features?(byteorder_1_3_1_features {}) }: byteorder_1_3_1_ {
    features = mkFeatures (features.byteorder_1_3_1 or {});
  };
  byteorder_1_3_1_features = f: updateFeatures f (rec {
    byteorder_1_3_1.default = (f.byteorder_1_3_1.default or true);
    byteorder_1_3_1.std =
      (f.byteorder_1_3_1.std or false) ||
      (f.byteorder_1_3_1.default or false) ||
      (byteorder_1_3_1.default or false);
  }) [];
  bytes_0_4_12 = { features?(bytes_0_4_12_features {}) }: bytes_0_4_12_ {
    dependencies = mapFeatures features ([ byteorder_1_3_1 iovec_0_1_2 ]);
    features = mkFeatures (features.bytes_0_4_12 or {});
  };
  bytes_0_4_12_features = f: updateFeatures f (rec {
    byteorder_1_3_1.default = true;
    byteorder_1_3_1.i128 =
      (f.byteorder_1_3_1.i128 or false) ||
      (bytes_0_4_12.i128 or false) ||
      (f.bytes_0_4_12.i128 or false);
    bytes_0_4_12.default = (f.bytes_0_4_12.default or true);
    iovec_0_1_2.default = true;
  }) [ byteorder_1_3_1_features iovec_0_1_2_features ];
  cfg_if_0_1_7 = { features?(cfg_if_0_1_7_features {}) }: cfg_if_0_1_7_ {};
  cfg_if_0_1_7_features = f: updateFeatures f (rec {
    cfg_if_0_1_7.default = (f.cfg_if_0_1_7.default or true);
  }) [];
  cloudabi_0_0_3 = { features?(cloudabi_0_0_3_features {}) }: cloudabi_0_0_3_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.cloudabi_0_0_3.bitflags or false then [ bitflags_1_0_4 ] else []));
    features = mkFeatures (features.cloudabi_0_0_3 or {});
  };
  cloudabi_0_0_3_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    cloudabi_0_0_3.bitflags =
      (f.cloudabi_0_0_3.bitflags or false) ||
      (f.cloudabi_0_0_3.default or false) ||
      (cloudabi_0_0_3.default or false);
    cloudabi_0_0_3.default = (f.cloudabi_0_0_3.default or true);
  }) [ bitflags_1_0_4_features ];
  crossbeam_deque_0_7_1 = { features?(crossbeam_deque_0_7_1_features {}) }: crossbeam_deque_0_7_1_ {
    dependencies = mapFeatures features ([ crossbeam_epoch_0_7_1 crossbeam_utils_0_6_5 ]);
  };
  crossbeam_deque_0_7_1_features = f: updateFeatures f (rec {
    crossbeam_deque_0_7_1.default = (f.crossbeam_deque_0_7_1.default or true);
    crossbeam_epoch_0_7_1.default = true;
    crossbeam_utils_0_6_5.default = true;
  }) [ crossbeam_epoch_0_7_1_features crossbeam_utils_0_6_5_features ];
  crossbeam_epoch_0_7_1 = { features?(crossbeam_epoch_0_7_1_features {}) }: crossbeam_epoch_0_7_1_ {
    dependencies = mapFeatures features ([ arrayvec_0_4_10 cfg_if_0_1_7 crossbeam_utils_0_6_5 memoffset_0_2_1 scopeguard_0_3_3 ]
      ++ (if features.crossbeam_epoch_0_7_1.lazy_static or false then [ lazy_static_1_3_0 ] else []));
    features = mkFeatures (features.crossbeam_epoch_0_7_1 or {});
  };
  crossbeam_epoch_0_7_1_features = f: updateFeatures f (rec {
    arrayvec_0_4_10.default = (f.arrayvec_0_4_10.default or false);
    arrayvec_0_4_10.use_union =
      (f.arrayvec_0_4_10.use_union or false) ||
      (crossbeam_epoch_0_7_1.nightly or false) ||
      (f.crossbeam_epoch_0_7_1.nightly or false);
    cfg_if_0_1_7.default = true;
    crossbeam_epoch_0_7_1.default = (f.crossbeam_epoch_0_7_1.default or true);
    crossbeam_epoch_0_7_1.lazy_static =
      (f.crossbeam_epoch_0_7_1.lazy_static or false) ||
      (f.crossbeam_epoch_0_7_1.std or false) ||
      (crossbeam_epoch_0_7_1.std or false);
    crossbeam_epoch_0_7_1.std =
      (f.crossbeam_epoch_0_7_1.std or false) ||
      (f.crossbeam_epoch_0_7_1.default or false) ||
      (crossbeam_epoch_0_7_1.default or false);
    crossbeam_utils_0_6_5.default = (f.crossbeam_utils_0_6_5.default or false);
    crossbeam_utils_0_6_5.nightly =
      (f.crossbeam_utils_0_6_5.nightly or false) ||
      (crossbeam_epoch_0_7_1.nightly or false) ||
      (f.crossbeam_epoch_0_7_1.nightly or false);
    crossbeam_utils_0_6_5.std =
      (f.crossbeam_utils_0_6_5.std or false) ||
      (crossbeam_epoch_0_7_1.std or false) ||
      (f.crossbeam_epoch_0_7_1.std or false);
    lazy_static_1_3_0.default = true;
    memoffset_0_2_1.default = true;
    scopeguard_0_3_3.default = (f.scopeguard_0_3_3.default or false);
  }) [ arrayvec_0_4_10_features cfg_if_0_1_7_features crossbeam_utils_0_6_5_features lazy_static_1_3_0_features memoffset_0_2_1_features scopeguard_0_3_3_features ];
  crossbeam_queue_0_1_2 = { features?(crossbeam_queue_0_1_2_features {}) }: crossbeam_queue_0_1_2_ {
    dependencies = mapFeatures features ([ crossbeam_utils_0_6_5 ]);
  };
  crossbeam_queue_0_1_2_features = f: updateFeatures f (rec {
    crossbeam_queue_0_1_2.default = (f.crossbeam_queue_0_1_2.default or true);
    crossbeam_utils_0_6_5.default = true;
  }) [ crossbeam_utils_0_6_5_features ];
  crossbeam_utils_0_6_5 = { features?(crossbeam_utils_0_6_5_features {}) }: crossbeam_utils_0_6_5_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_7 ]
      ++ (if features.crossbeam_utils_0_6_5.lazy_static or false then [ lazy_static_1_3_0 ] else []));
    features = mkFeatures (features.crossbeam_utils_0_6_5 or {});
  };
  crossbeam_utils_0_6_5_features = f: updateFeatures f (rec {
    cfg_if_0_1_7.default = true;
    crossbeam_utils_0_6_5.default = (f.crossbeam_utils_0_6_5.default or true);
    crossbeam_utils_0_6_5.lazy_static =
      (f.crossbeam_utils_0_6_5.lazy_static or false) ||
      (f.crossbeam_utils_0_6_5.std or false) ||
      (crossbeam_utils_0_6_5.std or false);
    crossbeam_utils_0_6_5.std =
      (f.crossbeam_utils_0_6_5.std or false) ||
      (f.crossbeam_utils_0_6_5.default or false) ||
      (crossbeam_utils_0_6_5.default or false);
    lazy_static_1_3_0.default = true;
  }) [ cfg_if_0_1_7_features lazy_static_1_3_0_features ];
  fnv_1_0_6 = { features?(fnv_1_0_6_features {}) }: fnv_1_0_6_ {};
  fnv_1_0_6_features = f: updateFeatures f (rec {
    fnv_1_0_6.default = (f.fnv_1_0_6.default or true);
  }) [];
  fuchsia_cprng_0_1_1 = { features?(fuchsia_cprng_0_1_1_features {}) }: fuchsia_cprng_0_1_1_ {};
  fuchsia_cprng_0_1_1_features = f: updateFeatures f (rec {
    fuchsia_cprng_0_1_1.default = (f.fuchsia_cprng_0_1_1.default or true);
  }) [];
  fuchsia_zircon_0_3_3 = { features?(fuchsia_zircon_0_3_3_features {}) }: fuchsia_zircon_0_3_3_ {
    dependencies = mapFeatures features ([ bitflags_1_0_4 fuchsia_zircon_sys_0_3_3 ]);
  };
  fuchsia_zircon_0_3_3_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    fuchsia_zircon_0_3_3.default = (f.fuchsia_zircon_0_3_3.default or true);
    fuchsia_zircon_sys_0_3_3.default = true;
  }) [ bitflags_1_0_4_features fuchsia_zircon_sys_0_3_3_features ];
  fuchsia_zircon_sys_0_3_3 = { features?(fuchsia_zircon_sys_0_3_3_features {}) }: fuchsia_zircon_sys_0_3_3_ {};
  fuchsia_zircon_sys_0_3_3_features = f: updateFeatures f (rec {
    fuchsia_zircon_sys_0_3_3.default = (f.fuchsia_zircon_sys_0_3_3.default or true);
  }) [];
  futures_0_1_26 = { features?(futures_0_1_26_features {}) }: futures_0_1_26_ {
    features = mkFeatures (features.futures_0_1_26 or {});
  };
  futures_0_1_26_features = f: updateFeatures f (rec {
    futures_0_1_26.default = (f.futures_0_1_26.default or true);
    futures_0_1_26.use_std =
      (f.futures_0_1_26.use_std or false) ||
      (f.futures_0_1_26.default or false) ||
      (futures_0_1_26.default or false);
    futures_0_1_26.with-deprecated =
      (f.futures_0_1_26.with-deprecated or false) ||
      (f.futures_0_1_26.default or false) ||
      (futures_0_1_26.default or false);
  }) [];
  iovec_0_1_2 = { features?(iovec_0_1_2_features {}) }: iovec_0_1_2_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_53 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_2_8 ]) else []);
  };
  iovec_0_1_2_features = f: updateFeatures f (rec {
    iovec_0_1_2.default = (f.iovec_0_1_2.default or true);
    libc_0_2_53.default = true;
    winapi_0_2_8.default = true;
  }) [ libc_0_2_53_features winapi_0_2_8_features ];
  kernel32_sys_0_2_2 = { features?(kernel32_sys_0_2_2_features {}) }: kernel32_sys_0_2_2_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  kernel32_sys_0_2_2_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = (f.kernel32_sys_0_2_2.default or true);
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
  lazy_static_1_3_0 = { features?(lazy_static_1_3_0_features {}) }: lazy_static_1_3_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazy_static_1_3_0 or {});
  };
  lazy_static_1_3_0_features = f: updateFeatures f (rec {
    lazy_static_1_3_0.default = (f.lazy_static_1_3_0.default or true);
    lazy_static_1_3_0.spin =
      (f.lazy_static_1_3_0.spin or false) ||
      (f.lazy_static_1_3_0.spin_no_std or false) ||
      (lazy_static_1_3_0.spin_no_std or false);
  }) [];
  lazycell_1_2_1 = { features?(lazycell_1_2_1_features {}) }: lazycell_1_2_1_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazycell_1_2_1 or {});
  };
  lazycell_1_2_1_features = f: updateFeatures f (rec {
    lazycell_1_2_1.clippy =
      (f.lazycell_1_2_1.clippy or false) ||
      (f.lazycell_1_2_1.nightly-testing or false) ||
      (lazycell_1_2_1.nightly-testing or false);
    lazycell_1_2_1.default = (f.lazycell_1_2_1.default or true);
    lazycell_1_2_1.nightly =
      (f.lazycell_1_2_1.nightly or false) ||
      (f.lazycell_1_2_1.nightly-testing or false) ||
      (lazycell_1_2_1.nightly-testing or false);
  }) [];
  libc_0_2_53 = { features?(libc_0_2_53_features {}) }: libc_0_2_53_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.libc_0_2_53 or {});
  };
  libc_0_2_53_features = f: updateFeatures f (rec {
    libc_0_2_53.align =
      (f.libc_0_2_53.align or false) ||
      (f.libc_0_2_53.rustc-dep-of-std or false) ||
      (libc_0_2_53.rustc-dep-of-std or false);
    libc_0_2_53.default = (f.libc_0_2_53.default or true);
    libc_0_2_53.rustc-std-workspace-core =
      (f.libc_0_2_53.rustc-std-workspace-core or false) ||
      (f.libc_0_2_53.rustc-dep-of-std or false) ||
      (libc_0_2_53.rustc-dep-of-std or false);
    libc_0_2_53.use_std =
      (f.libc_0_2_53.use_std or false) ||
      (f.libc_0_2_53.default or false) ||
      (libc_0_2_53.default or false);
  }) [];
  lock_api_0_1_5 = { features?(lock_api_0_1_5_features {}) }: lock_api_0_1_5_ {
    dependencies = mapFeatures features ([ scopeguard_0_3_3 ]
      ++ (if features.lock_api_0_1_5.owning_ref or false then [ owning_ref_0_4_0 ] else []));
    features = mkFeatures (features.lock_api_0_1_5 or {});
  };
  lock_api_0_1_5_features = f: updateFeatures f (rec {
    lock_api_0_1_5.default = (f.lock_api_0_1_5.default or true);
    owning_ref_0_4_0.default = true;
    scopeguard_0_3_3.default = (f.scopeguard_0_3_3.default or false);
  }) [ owning_ref_0_4_0_features scopeguard_0_3_3_features ];
  log_0_4_6 = { features?(log_0_4_6_features {}) }: log_0_4_6_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_7 ]);
    features = mkFeatures (features.log_0_4_6 or {});
  };
  log_0_4_6_features = f: updateFeatures f (rec {
    cfg_if_0_1_7.default = true;
    log_0_4_6.default = (f.log_0_4_6.default or true);
  }) [ cfg_if_0_1_7_features ];
  memoffset_0_2_1 = { features?(memoffset_0_2_1_features {}) }: memoffset_0_2_1_ {};
  memoffset_0_2_1_features = f: updateFeatures f (rec {
    memoffset_0_2_1.default = (f.memoffset_0_2_1.default or true);
  }) [];
  mio_0_6_16 = { features?(mio_0_6_16_features {}) }: mio_0_6_16_ {
    dependencies = mapFeatures features ([ iovec_0_1_2 lazycell_1_2_1 log_0_4_6 net2_0_2_33 slab_0_4_2 ])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_zircon_0_3_3 fuchsia_zircon_sys_0_3_3 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_53 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ kernel32_sys_0_2_2 miow_0_2_1 winapi_0_2_8 ]) else []);
    features = mkFeatures (features.mio_0_6_16 or {});
  };
  mio_0_6_16_features = f: updateFeatures f (rec {
    fuchsia_zircon_0_3_3.default = true;
    fuchsia_zircon_sys_0_3_3.default = true;
    iovec_0_1_2.default = true;
    kernel32_sys_0_2_2.default = true;
    lazycell_1_2_1.default = true;
    libc_0_2_53.default = true;
    log_0_4_6.default = true;
    mio_0_6_16.default = (f.mio_0_6_16.default or true);
    mio_0_6_16.with-deprecated =
      (f.mio_0_6_16.with-deprecated or false) ||
      (f.mio_0_6_16.default or false) ||
      (mio_0_6_16.default or false);
    miow_0_2_1.default = true;
    net2_0_2_33.default = true;
    slab_0_4_2.default = true;
    winapi_0_2_8.default = true;
  }) [ iovec_0_1_2_features lazycell_1_2_1_features log_0_4_6_features net2_0_2_33_features slab_0_4_2_features fuchsia_zircon_0_3_3_features fuchsia_zircon_sys_0_3_3_features libc_0_2_53_features kernel32_sys_0_2_2_features miow_0_2_1_features winapi_0_2_8_features ];
  mio_named_pipes_0_1_6 = { features?(mio_named_pipes_0_1_6_features {}) }: mio_named_pipes_0_1_6_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ log_0_4_6 mio_0_6_16 miow_0_3_3 winapi_0_3_7 ]) else []);
  };
  mio_named_pipes_0_1_6_features = f: updateFeatures f (rec {
    log_0_4_6.default = true;
    mio_0_6_16.default = true;
    mio_named_pipes_0_1_6.default = (f.mio_named_pipes_0_1_6.default or true);
    miow_0_3_3.default = true;
    winapi_0_3_7.default = true;
    winapi_0_3_7.ioapiset = true;
    winapi_0_3_7.minwinbase = true;
    winapi_0_3_7.winbase = true;
    winapi_0_3_7.winerror = true;
  }) [ log_0_4_6_features mio_0_6_16_features miow_0_3_3_features winapi_0_3_7_features ];
  mio_uds_0_6_7 = { features?(mio_uds_0_6_7_features {}) }: mio_uds_0_6_7_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ iovec_0_1_2 libc_0_2_53 mio_0_6_16 ]) else []);
  };
  mio_uds_0_6_7_features = f: updateFeatures f (rec {
    iovec_0_1_2.default = true;
    libc_0_2_53.default = true;
    mio_0_6_16.default = true;
    mio_uds_0_6_7.default = (f.mio_uds_0_6_7.default or true);
  }) [ iovec_0_1_2_features libc_0_2_53_features mio_0_6_16_features ];
  miow_0_2_1 = { features?(miow_0_2_1_features {}) }: miow_0_2_1_ {
    dependencies = mapFeatures features ([ kernel32_sys_0_2_2 net2_0_2_33 winapi_0_2_8 ws2_32_sys_0_2_1 ]);
  };
  miow_0_2_1_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = true;
    miow_0_2_1.default = (f.miow_0_2_1.default or true);
    net2_0_2_33.default = (f.net2_0_2_33.default or false);
    winapi_0_2_8.default = true;
    ws2_32_sys_0_2_1.default = true;
  }) [ kernel32_sys_0_2_2_features net2_0_2_33_features winapi_0_2_8_features ws2_32_sys_0_2_1_features ];
  miow_0_3_3 = { features?(miow_0_3_3_features {}) }: miow_0_3_3_ {
    dependencies = mapFeatures features ([ socket2_0_3_8 winapi_0_3_7 ]);
  };
  miow_0_3_3_features = f: updateFeatures f (rec {
    miow_0_3_3.default = (f.miow_0_3_3.default or true);
    socket2_0_3_8.default = true;
    winapi_0_3_7.default = true;
    winapi_0_3_7.fileapi = true;
    winapi_0_3_7.handleapi = true;
    winapi_0_3_7.ioapiset = true;
    winapi_0_3_7.minwindef = true;
    winapi_0_3_7.namedpipeapi = true;
    winapi_0_3_7.ntdef = true;
    winapi_0_3_7.std = true;
    winapi_0_3_7.synchapi = true;
    winapi_0_3_7.winerror = true;
    winapi_0_3_7.winsock2 = true;
    winapi_0_3_7.ws2def = true;
    winapi_0_3_7.ws2ipdef = true;
  }) [ socket2_0_3_8_features winapi_0_3_7_features ];
  net2_0_2_33 = { features?(net2_0_2_33_features {}) }: net2_0_2_33_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_7 ])
      ++ (if kernel == "redox" || (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_53 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_7 ]) else []);
    features = mkFeatures (features.net2_0_2_33 or {});
  };
  net2_0_2_33_features = f: updateFeatures f (rec {
    cfg_if_0_1_7.default = true;
    libc_0_2_53.default = true;
    net2_0_2_33.default = (f.net2_0_2_33.default or true);
    net2_0_2_33.duration =
      (f.net2_0_2_33.duration or false) ||
      (f.net2_0_2_33.default or false) ||
      (net2_0_2_33.default or false);
    winapi_0_3_7.default = true;
    winapi_0_3_7.handleapi = true;
    winapi_0_3_7.winsock2 = true;
    winapi_0_3_7.ws2def = true;
    winapi_0_3_7.ws2ipdef = true;
    winapi_0_3_7.ws2tcpip = true;
  }) [ cfg_if_0_1_7_features libc_0_2_53_features winapi_0_3_7_features ];
  netcheck_0_1_0 = { features?(netcheck_0_1_0_features {}) }: netcheck_0_1_0_ {
    dependencies = mapFeatures features ([ futures_0_1_26 tokio_core_0_1_17 tokio_process_0_2_3 ]);
  };
  netcheck_0_1_0_features = f: updateFeatures f (rec {
    futures_0_1_26.default = true;
    netcheck_0_1_0.default = (f.netcheck_0_1_0.default or true);
    tokio_core_0_1_17.default = true;
    tokio_process_0_2_3.default = true;
  }) [ futures_0_1_26_features tokio_core_0_1_17_features tokio_process_0_2_3_features ];
  nodrop_0_1_13 = { features?(nodrop_0_1_13_features {}) }: nodrop_0_1_13_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.nodrop_0_1_13 or {});
  };
  nodrop_0_1_13_features = f: updateFeatures f (rec {
    nodrop_0_1_13.default = (f.nodrop_0_1_13.default or true);
    nodrop_0_1_13.nodrop-union =
      (f.nodrop_0_1_13.nodrop-union or false) ||
      (f.nodrop_0_1_13.use_union or false) ||
      (nodrop_0_1_13.use_union or false);
    nodrop_0_1_13.std =
      (f.nodrop_0_1_13.std or false) ||
      (f.nodrop_0_1_13.default or false) ||
      (nodrop_0_1_13.default or false);
  }) [];
  num_cpus_1_10_0 = { features?(num_cpus_1_10_0_features {}) }: num_cpus_1_10_0_ {
    dependencies = mapFeatures features ([ libc_0_2_53 ]);
  };
  num_cpus_1_10_0_features = f: updateFeatures f (rec {
    libc_0_2_53.default = true;
    num_cpus_1_10_0.default = (f.num_cpus_1_10_0.default or true);
  }) [ libc_0_2_53_features ];
  owning_ref_0_4_0 = { features?(owning_ref_0_4_0_features {}) }: owning_ref_0_4_0_ {
    dependencies = mapFeatures features ([ stable_deref_trait_1_1_1 ]);
  };
  owning_ref_0_4_0_features = f: updateFeatures f (rec {
    owning_ref_0_4_0.default = (f.owning_ref_0_4_0.default or true);
    stable_deref_trait_1_1_1.default = true;
  }) [ stable_deref_trait_1_1_1_features ];
  parking_lot_0_7_1 = { features?(parking_lot_0_7_1_features {}) }: parking_lot_0_7_1_ {
    dependencies = mapFeatures features ([ lock_api_0_1_5 parking_lot_core_0_4_0 ]);
    features = mkFeatures (features.parking_lot_0_7_1 or {});
  };
  parking_lot_0_7_1_features = f: updateFeatures f (rec {
    lock_api_0_1_5.default = true;
    lock_api_0_1_5.nightly =
      (f.lock_api_0_1_5.nightly or false) ||
      (parking_lot_0_7_1.nightly or false) ||
      (f.parking_lot_0_7_1.nightly or false);
    lock_api_0_1_5.owning_ref =
      (f.lock_api_0_1_5.owning_ref or false) ||
      (parking_lot_0_7_1.owning_ref or false) ||
      (f.parking_lot_0_7_1.owning_ref or false);
    parking_lot_0_7_1.default = (f.parking_lot_0_7_1.default or true);
    parking_lot_0_7_1.owning_ref =
      (f.parking_lot_0_7_1.owning_ref or false) ||
      (f.parking_lot_0_7_1.default or false) ||
      (parking_lot_0_7_1.default or false);
    parking_lot_core_0_4_0.deadlock_detection =
      (f.parking_lot_core_0_4_0.deadlock_detection or false) ||
      (parking_lot_0_7_1.deadlock_detection or false) ||
      (f.parking_lot_0_7_1.deadlock_detection or false);
    parking_lot_core_0_4_0.default = true;
    parking_lot_core_0_4_0.nightly =
      (f.parking_lot_core_0_4_0.nightly or false) ||
      (parking_lot_0_7_1.nightly or false) ||
      (f.parking_lot_0_7_1.nightly or false);
  }) [ lock_api_0_1_5_features parking_lot_core_0_4_0_features ];
  parking_lot_core_0_4_0 = { features?(parking_lot_core_0_4_0_features {}) }: parking_lot_core_0_4_0_ {
    dependencies = mapFeatures features ([ rand_0_6_5 smallvec_0_6_9 ])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_53 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_7 ]) else []);
    buildDependencies = mapFeatures features ([ rustc_version_0_2_3 ]);
    features = mkFeatures (features.parking_lot_core_0_4_0 or {});
  };
  parking_lot_core_0_4_0_features = f: updateFeatures f (rec {
    libc_0_2_53.default = true;
    parking_lot_core_0_4_0.backtrace =
      (f.parking_lot_core_0_4_0.backtrace or false) ||
      (f.parking_lot_core_0_4_0.deadlock_detection or false) ||
      (parking_lot_core_0_4_0.deadlock_detection or false);
    parking_lot_core_0_4_0.default = (f.parking_lot_core_0_4_0.default or true);
    parking_lot_core_0_4_0.petgraph =
      (f.parking_lot_core_0_4_0.petgraph or false) ||
      (f.parking_lot_core_0_4_0.deadlock_detection or false) ||
      (parking_lot_core_0_4_0.deadlock_detection or false);
    parking_lot_core_0_4_0.thread-id =
      (f.parking_lot_core_0_4_0.thread-id or false) ||
      (f.parking_lot_core_0_4_0.deadlock_detection or false) ||
      (parking_lot_core_0_4_0.deadlock_detection or false);
    rand_0_6_5.default = true;
    rustc_version_0_2_3.default = true;
    smallvec_0_6_9.default = true;
    winapi_0_3_7.default = true;
    winapi_0_3_7.errhandlingapi = true;
    winapi_0_3_7.handleapi = true;
    winapi_0_3_7.minwindef = true;
    winapi_0_3_7.ntstatus = true;
    winapi_0_3_7.winbase = true;
    winapi_0_3_7.winerror = true;
    winapi_0_3_7.winnt = true;
  }) [ rand_0_6_5_features smallvec_0_6_9_features rustc_version_0_2_3_features libc_0_2_53_features winapi_0_3_7_features ];
  rand_0_6_5 = { features?(rand_0_6_5_features {}) }: rand_0_6_5_ {
    dependencies = mapFeatures features ([ rand_chacha_0_1_1 rand_core_0_4_0 rand_hc_0_1_0 rand_isaac_0_1_1 rand_jitter_0_1_3 rand_pcg_0_1_2 rand_xorshift_0_1_1 ]
      ++ (if features.rand_0_6_5.rand_os or false then [ rand_os_0_1_3 ] else []))
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_53 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_7 ]) else []);
    buildDependencies = mapFeatures features ([ autocfg_0_1_2 ]);
    features = mkFeatures (features.rand_0_6_5 or {});
  };
  rand_0_6_5_features = f: updateFeatures f (rec {
    autocfg_0_1_2.default = true;
    libc_0_2_53.default = (f.libc_0_2_53.default or false);
    rand_0_6_5.alloc =
      (f.rand_0_6_5.alloc or false) ||
      (f.rand_0_6_5.std or false) ||
      (rand_0_6_5.std or false);
    rand_0_6_5.default = (f.rand_0_6_5.default or true);
    rand_0_6_5.packed_simd =
      (f.rand_0_6_5.packed_simd or false) ||
      (f.rand_0_6_5.simd_support or false) ||
      (rand_0_6_5.simd_support or false);
    rand_0_6_5.rand_os =
      (f.rand_0_6_5.rand_os or false) ||
      (f.rand_0_6_5.std or false) ||
      (rand_0_6_5.std or false);
    rand_0_6_5.simd_support =
      (f.rand_0_6_5.simd_support or false) ||
      (f.rand_0_6_5.nightly or false) ||
      (rand_0_6_5.nightly or false);
    rand_0_6_5.std =
      (f.rand_0_6_5.std or false) ||
      (f.rand_0_6_5.default or false) ||
      (rand_0_6_5.default or false);
    rand_chacha_0_1_1.default = true;
    rand_core_0_4_0.alloc =
      (f.rand_core_0_4_0.alloc or false) ||
      (rand_0_6_5.alloc or false) ||
      (f.rand_0_6_5.alloc or false);
    rand_core_0_4_0.default = true;
    rand_core_0_4_0.serde1 =
      (f.rand_core_0_4_0.serde1 or false) ||
      (rand_0_6_5.serde1 or false) ||
      (f.rand_0_6_5.serde1 or false);
    rand_core_0_4_0.std =
      (f.rand_core_0_4_0.std or false) ||
      (rand_0_6_5.std or false) ||
      (f.rand_0_6_5.std or false);
    rand_hc_0_1_0.default = true;
    rand_isaac_0_1_1.default = true;
    rand_isaac_0_1_1.serde1 =
      (f.rand_isaac_0_1_1.serde1 or false) ||
      (rand_0_6_5.serde1 or false) ||
      (f.rand_0_6_5.serde1 or false);
    rand_jitter_0_1_3.default = true;
    rand_jitter_0_1_3.std =
      (f.rand_jitter_0_1_3.std or false) ||
      (rand_0_6_5.std or false) ||
      (f.rand_0_6_5.std or false);
    rand_os_0_1_3.default = true;
    rand_os_0_1_3.stdweb =
      (f.rand_os_0_1_3.stdweb or false) ||
      (rand_0_6_5.stdweb or false) ||
      (f.rand_0_6_5.stdweb or false);
    rand_os_0_1_3.wasm-bindgen =
      (f.rand_os_0_1_3.wasm-bindgen or false) ||
      (rand_0_6_5.wasm-bindgen or false) ||
      (f.rand_0_6_5.wasm-bindgen or false);
    rand_pcg_0_1_2.default = true;
    rand_xorshift_0_1_1.default = true;
    rand_xorshift_0_1_1.serde1 =
      (f.rand_xorshift_0_1_1.serde1 or false) ||
      (rand_0_6_5.serde1 or false) ||
      (f.rand_0_6_5.serde1 or false);
    winapi_0_3_7.default = true;
    winapi_0_3_7.minwindef = true;
    winapi_0_3_7.ntsecapi = true;
    winapi_0_3_7.profileapi = true;
    winapi_0_3_7.winnt = true;
  }) [ rand_chacha_0_1_1_features rand_core_0_4_0_features rand_hc_0_1_0_features rand_isaac_0_1_1_features rand_jitter_0_1_3_features rand_os_0_1_3_features rand_pcg_0_1_2_features rand_xorshift_0_1_1_features autocfg_0_1_2_features libc_0_2_53_features winapi_0_3_7_features ];
  rand_chacha_0_1_1 = { features?(rand_chacha_0_1_1_features {}) }: rand_chacha_0_1_1_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    buildDependencies = mapFeatures features ([ autocfg_0_1_2 ]);
  };
  rand_chacha_0_1_1_features = f: updateFeatures f (rec {
    autocfg_0_1_2.default = true;
    rand_chacha_0_1_1.default = (f.rand_chacha_0_1_1.default or true);
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
  }) [ rand_core_0_3_1_features autocfg_0_1_2_features ];
  rand_core_0_3_1 = { features?(rand_core_0_3_1_features {}) }: rand_core_0_3_1_ {
    dependencies = mapFeatures features ([ rand_core_0_4_0 ]);
    features = mkFeatures (features.rand_core_0_3_1 or {});
  };
  rand_core_0_3_1_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or true);
    rand_core_0_3_1.std =
      (f.rand_core_0_3_1.std or false) ||
      (f.rand_core_0_3_1.default or false) ||
      (rand_core_0_3_1.default or false);
    rand_core_0_4_0.alloc =
      (f.rand_core_0_4_0.alloc or false) ||
      (rand_core_0_3_1.alloc or false) ||
      (f.rand_core_0_3_1.alloc or false);
    rand_core_0_4_0.default = true;
    rand_core_0_4_0.serde1 =
      (f.rand_core_0_4_0.serde1 or false) ||
      (rand_core_0_3_1.serde1 or false) ||
      (f.rand_core_0_3_1.serde1 or false);
    rand_core_0_4_0.std =
      (f.rand_core_0_4_0.std or false) ||
      (rand_core_0_3_1.std or false) ||
      (f.rand_core_0_3_1.std or false);
  }) [ rand_core_0_4_0_features ];
  rand_core_0_4_0 = { features?(rand_core_0_4_0_features {}) }: rand_core_0_4_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.rand_core_0_4_0 or {});
  };
  rand_core_0_4_0_features = f: updateFeatures f (rec {
    rand_core_0_4_0.alloc =
      (f.rand_core_0_4_0.alloc or false) ||
      (f.rand_core_0_4_0.std or false) ||
      (rand_core_0_4_0.std or false);
    rand_core_0_4_0.default = (f.rand_core_0_4_0.default or true);
    rand_core_0_4_0.serde =
      (f.rand_core_0_4_0.serde or false) ||
      (f.rand_core_0_4_0.serde1 or false) ||
      (rand_core_0_4_0.serde1 or false);
    rand_core_0_4_0.serde_derive =
      (f.rand_core_0_4_0.serde_derive or false) ||
      (f.rand_core_0_4_0.serde1 or false) ||
      (rand_core_0_4_0.serde1 or false);
  }) [];
  rand_hc_0_1_0 = { features?(rand_hc_0_1_0_features {}) }: rand_hc_0_1_0_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
  };
  rand_hc_0_1_0_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_hc_0_1_0.default = (f.rand_hc_0_1_0.default or true);
  }) [ rand_core_0_3_1_features ];
  rand_isaac_0_1_1 = { features?(rand_isaac_0_1_1_features {}) }: rand_isaac_0_1_1_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    features = mkFeatures (features.rand_isaac_0_1_1 or {});
  };
  rand_isaac_0_1_1_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_core_0_3_1.serde1 =
      (f.rand_core_0_3_1.serde1 or false) ||
      (rand_isaac_0_1_1.serde1 or false) ||
      (f.rand_isaac_0_1_1.serde1 or false);
    rand_isaac_0_1_1.default = (f.rand_isaac_0_1_1.default or true);
    rand_isaac_0_1_1.serde =
      (f.rand_isaac_0_1_1.serde or false) ||
      (f.rand_isaac_0_1_1.serde1 or false) ||
      (rand_isaac_0_1_1.serde1 or false);
    rand_isaac_0_1_1.serde_derive =
      (f.rand_isaac_0_1_1.serde_derive or false) ||
      (f.rand_isaac_0_1_1.serde1 or false) ||
      (rand_isaac_0_1_1.serde1 or false);
  }) [ rand_core_0_3_1_features ];
  rand_jitter_0_1_3 = { features?(rand_jitter_0_1_3_features {}) }: rand_jitter_0_1_3_ {
    dependencies = mapFeatures features ([ rand_core_0_4_0 ])
      ++ (if kernel == "darwin" || kernel == "ios" then mapFeatures features ([ libc_0_2_53 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_7 ]) else []);
    features = mkFeatures (features.rand_jitter_0_1_3 or {});
  };
  rand_jitter_0_1_3_features = f: updateFeatures f (rec {
    libc_0_2_53.default = true;
    rand_core_0_4_0.default = true;
    rand_core_0_4_0.std =
      (f.rand_core_0_4_0.std or false) ||
      (rand_jitter_0_1_3.std or false) ||
      (f.rand_jitter_0_1_3.std or false);
    rand_jitter_0_1_3.default = (f.rand_jitter_0_1_3.default or true);
    winapi_0_3_7.default = true;
    winapi_0_3_7.profileapi = true;
  }) [ rand_core_0_4_0_features libc_0_2_53_features winapi_0_3_7_features ];
  rand_os_0_1_3 = { features?(rand_os_0_1_3_features {}) }: rand_os_0_1_3_ {
    dependencies = mapFeatures features ([ rand_core_0_4_0 ])
      ++ (if abi == "sgx" then mapFeatures features ([ rdrand_0_4_0 ]) else [])
      ++ (if kernel == "cloudabi" then mapFeatures features ([ cloudabi_0_0_3 ]) else [])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_cprng_0_1_1 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_53 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_7 ]) else [])
      ++ (if kernel == "wasm32-unknown-unknown" then mapFeatures features ([]) else []);
  };
  rand_os_0_1_3_features = f: updateFeatures f (rec {
    cloudabi_0_0_3.default = true;
    fuchsia_cprng_0_1_1.default = true;
    libc_0_2_53.default = true;
    rand_core_0_4_0.default = true;
    rand_core_0_4_0.std = true;
    rand_os_0_1_3.default = (f.rand_os_0_1_3.default or true);
    rdrand_0_4_0.default = true;
    winapi_0_3_7.default = true;
    winapi_0_3_7.minwindef = true;
    winapi_0_3_7.ntsecapi = true;
    winapi_0_3_7.winnt = true;
  }) [ rand_core_0_4_0_features rdrand_0_4_0_features cloudabi_0_0_3_features fuchsia_cprng_0_1_1_features libc_0_2_53_features winapi_0_3_7_features ];
  rand_pcg_0_1_2 = { features?(rand_pcg_0_1_2_features {}) }: rand_pcg_0_1_2_ {
    dependencies = mapFeatures features ([ rand_core_0_4_0 ]);
    buildDependencies = mapFeatures features ([ autocfg_0_1_2 ]);
    features = mkFeatures (features.rand_pcg_0_1_2 or {});
  };
  rand_pcg_0_1_2_features = f: updateFeatures f (rec {
    autocfg_0_1_2.default = true;
    rand_core_0_4_0.default = true;
    rand_pcg_0_1_2.default = (f.rand_pcg_0_1_2.default or true);
    rand_pcg_0_1_2.serde =
      (f.rand_pcg_0_1_2.serde or false) ||
      (f.rand_pcg_0_1_2.serde1 or false) ||
      (rand_pcg_0_1_2.serde1 or false);
    rand_pcg_0_1_2.serde_derive =
      (f.rand_pcg_0_1_2.serde_derive or false) ||
      (f.rand_pcg_0_1_2.serde1 or false) ||
      (rand_pcg_0_1_2.serde1 or false);
  }) [ rand_core_0_4_0_features autocfg_0_1_2_features ];
  rand_xorshift_0_1_1 = { features?(rand_xorshift_0_1_1_features {}) }: rand_xorshift_0_1_1_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    features = mkFeatures (features.rand_xorshift_0_1_1 or {});
  };
  rand_xorshift_0_1_1_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_xorshift_0_1_1.default = (f.rand_xorshift_0_1_1.default or true);
    rand_xorshift_0_1_1.serde =
      (f.rand_xorshift_0_1_1.serde or false) ||
      (f.rand_xorshift_0_1_1.serde1 or false) ||
      (rand_xorshift_0_1_1.serde1 or false);
    rand_xorshift_0_1_1.serde_derive =
      (f.rand_xorshift_0_1_1.serde_derive or false) ||
      (f.rand_xorshift_0_1_1.serde1 or false) ||
      (rand_xorshift_0_1_1.serde1 or false);
  }) [ rand_core_0_3_1_features ];
  rdrand_0_4_0 = { features?(rdrand_0_4_0_features {}) }: rdrand_0_4_0_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    features = mkFeatures (features.rdrand_0_4_0 or {});
  };
  rdrand_0_4_0_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rdrand_0_4_0.default = (f.rdrand_0_4_0.default or true);
    rdrand_0_4_0.std =
      (f.rdrand_0_4_0.std or false) ||
      (f.rdrand_0_4_0.default or false) ||
      (rdrand_0_4_0.default or false);
  }) [ rand_core_0_3_1_features ];
  redox_syscall_0_1_54 = { features?(redox_syscall_0_1_54_features {}) }: redox_syscall_0_1_54_ {};
  redox_syscall_0_1_54_features = f: updateFeatures f (rec {
    redox_syscall_0_1_54.default = (f.redox_syscall_0_1_54.default or true);
  }) [];
  rustc_version_0_2_3 = { features?(rustc_version_0_2_3_features {}) }: rustc_version_0_2_3_ {
    dependencies = mapFeatures features ([ semver_0_9_0 ]);
  };
  rustc_version_0_2_3_features = f: updateFeatures f (rec {
    rustc_version_0_2_3.default = (f.rustc_version_0_2_3.default or true);
    semver_0_9_0.default = true;
  }) [ semver_0_9_0_features ];
  scoped_tls_0_1_2 = { features?(scoped_tls_0_1_2_features {}) }: scoped_tls_0_1_2_ {
    features = mkFeatures (features.scoped_tls_0_1_2 or {});
  };
  scoped_tls_0_1_2_features = f: updateFeatures f (rec {
    scoped_tls_0_1_2.default = (f.scoped_tls_0_1_2.default or true);
  }) [];
  scopeguard_0_3_3 = { features?(scopeguard_0_3_3_features {}) }: scopeguard_0_3_3_ {
    features = mkFeatures (features.scopeguard_0_3_3 or {});
  };
  scopeguard_0_3_3_features = f: updateFeatures f (rec {
    scopeguard_0_3_3.default = (f.scopeguard_0_3_3.default or true);
    scopeguard_0_3_3.use_std =
      (f.scopeguard_0_3_3.use_std or false) ||
      (f.scopeguard_0_3_3.default or false) ||
      (scopeguard_0_3_3.default or false);
  }) [];
  semver_0_9_0 = { features?(semver_0_9_0_features {}) }: semver_0_9_0_ {
    dependencies = mapFeatures features ([ semver_parser_0_7_0 ]);
    features = mkFeatures (features.semver_0_9_0 or {});
  };
  semver_0_9_0_features = f: updateFeatures f (rec {
    semver_0_9_0.default = (f.semver_0_9_0.default or true);
    semver_0_9_0.serde =
      (f.semver_0_9_0.serde or false) ||
      (f.semver_0_9_0.ci or false) ||
      (semver_0_9_0.ci or false);
    semver_parser_0_7_0.default = true;
  }) [ semver_parser_0_7_0_features ];
  semver_parser_0_7_0 = { features?(semver_parser_0_7_0_features {}) }: semver_parser_0_7_0_ {};
  semver_parser_0_7_0_features = f: updateFeatures f (rec {
    semver_parser_0_7_0.default = (f.semver_parser_0_7_0.default or true);
  }) [];
  signal_hook_0_1_9 = { features?(signal_hook_0_1_9_features {}) }: signal_hook_0_1_9_ {
    dependencies = mapFeatures features ([ libc_0_2_53 signal_hook_registry_1_0_0 ]);
    features = mkFeatures (features.signal_hook_0_1_9 or {});
  };
  signal_hook_0_1_9_features = f: updateFeatures f (rec {
    libc_0_2_53.default = true;
    signal_hook_0_1_9.default = (f.signal_hook_0_1_9.default or true);
    signal_hook_0_1_9.futures =
      (f.signal_hook_0_1_9.futures or false) ||
      (f.signal_hook_0_1_9.tokio-support or false) ||
      (signal_hook_0_1_9.tokio-support or false);
    signal_hook_0_1_9.mio =
      (f.signal_hook_0_1_9.mio or false) ||
      (f.signal_hook_0_1_9.mio-support or false) ||
      (signal_hook_0_1_9.mio-support or false);
    signal_hook_0_1_9.mio-support =
      (f.signal_hook_0_1_9.mio-support or false) ||
      (f.signal_hook_0_1_9.tokio-support or false) ||
      (signal_hook_0_1_9.tokio-support or false);
    signal_hook_0_1_9.mio-uds =
      (f.signal_hook_0_1_9.mio-uds or false) ||
      (f.signal_hook_0_1_9.mio-support or false) ||
      (signal_hook_0_1_9.mio-support or false);
    signal_hook_0_1_9.tokio-reactor =
      (f.signal_hook_0_1_9.tokio-reactor or false) ||
      (f.signal_hook_0_1_9.tokio-support or false) ||
      (signal_hook_0_1_9.tokio-support or false);
    signal_hook_registry_1_0_0.default = true;
  }) [ libc_0_2_53_features signal_hook_registry_1_0_0_features ];
  signal_hook_registry_1_0_0 = { features?(signal_hook_registry_1_0_0_features {}) }: signal_hook_registry_1_0_0_ {
    dependencies = mapFeatures features ([ arc_swap_0_3_11 libc_0_2_53 ]);
  };
  signal_hook_registry_1_0_0_features = f: updateFeatures f (rec {
    arc_swap_0_3_11.default = true;
    libc_0_2_53.default = true;
    signal_hook_registry_1_0_0.default = (f.signal_hook_registry_1_0_0.default or true);
  }) [ arc_swap_0_3_11_features libc_0_2_53_features ];
  slab_0_4_2 = { features?(slab_0_4_2_features {}) }: slab_0_4_2_ {};
  slab_0_4_2_features = f: updateFeatures f (rec {
    slab_0_4_2.default = (f.slab_0_4_2.default or true);
  }) [];
  smallvec_0_6_9 = { features?(smallvec_0_6_9_features {}) }: smallvec_0_6_9_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.smallvec_0_6_9 or {});
  };
  smallvec_0_6_9_features = f: updateFeatures f (rec {
    smallvec_0_6_9.default = (f.smallvec_0_6_9.default or true);
    smallvec_0_6_9.std =
      (f.smallvec_0_6_9.std or false) ||
      (f.smallvec_0_6_9.default or false) ||
      (smallvec_0_6_9.default or false);
  }) [];
  socket2_0_3_8 = { features?(socket2_0_3_8_features {}) }: socket2_0_3_8_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") || kernel == "redox" then mapFeatures features ([ cfg_if_0_1_7 libc_0_2_53 ]) else [])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_54 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_7 ]) else []);
    features = mkFeatures (features.socket2_0_3_8 or {});
  };
  socket2_0_3_8_features = f: updateFeatures f (rec {
    cfg_if_0_1_7.default = true;
    libc_0_2_53.default = true;
    redox_syscall_0_1_54.default = true;
    socket2_0_3_8.default = (f.socket2_0_3_8.default or true);
    winapi_0_3_7.default = true;
    winapi_0_3_7.handleapi = true;
    winapi_0_3_7.minwindef = true;
    winapi_0_3_7.ws2def = true;
    winapi_0_3_7.ws2ipdef = true;
    winapi_0_3_7.ws2tcpip = true;
  }) [ cfg_if_0_1_7_features libc_0_2_53_features redox_syscall_0_1_54_features winapi_0_3_7_features ];
  stable_deref_trait_1_1_1 = { features?(stable_deref_trait_1_1_1_features {}) }: stable_deref_trait_1_1_1_ {
    features = mkFeatures (features.stable_deref_trait_1_1_1 or {});
  };
  stable_deref_trait_1_1_1_features = f: updateFeatures f (rec {
    stable_deref_trait_1_1_1.default = (f.stable_deref_trait_1_1_1.default or true);
    stable_deref_trait_1_1_1.std =
      (f.stable_deref_trait_1_1_1.std or false) ||
      (f.stable_deref_trait_1_1_1.default or false) ||
      (stable_deref_trait_1_1_1.default or false);
  }) [];
  tokio_0_1_19 = { features?(tokio_0_1_19_features {}) }: tokio_0_1_19_ {
    dependencies = mapFeatures features ([ futures_0_1_26 ]
      ++ (if features.tokio_0_1_19.bytes or false then [ bytes_0_4_12 ] else [])
      ++ (if features.tokio_0_1_19.mio or false then [ mio_0_6_16 ] else [])
      ++ (if features.tokio_0_1_19.num_cpus or false then [ num_cpus_1_10_0 ] else [])
      ++ (if features.tokio_0_1_19.tokio-codec or false then [ tokio_codec_0_1_1 ] else [])
      ++ (if features.tokio_0_1_19.tokio-current-thread or false then [ tokio_current_thread_0_1_6 ] else [])
      ++ (if features.tokio_0_1_19.tokio-executor or false then [ tokio_executor_0_1_7 ] else [])
      ++ (if features.tokio_0_1_19.tokio-fs or false then [ tokio_fs_0_1_6 ] else [])
      ++ (if features.tokio_0_1_19.tokio-io or false then [ tokio_io_0_1_12 ] else [])
      ++ (if features.tokio_0_1_19.tokio-reactor or false then [ tokio_reactor_0_1_9 ] else [])
      ++ (if features.tokio_0_1_19.tokio-sync or false then [ tokio_sync_0_1_5 ] else [])
      ++ (if features.tokio_0_1_19.tokio-tcp or false then [ tokio_tcp_0_1_3 ] else [])
      ++ (if features.tokio_0_1_19.tokio-threadpool or false then [ tokio_threadpool_0_1_14 ] else [])
      ++ (if features.tokio_0_1_19.tokio-timer or false then [ tokio_timer_0_2_10 ] else [])
      ++ (if features.tokio_0_1_19.tokio-trace-core or false then [ tokio_trace_core_0_1_0 ] else [])
      ++ (if features.tokio_0_1_19.tokio-udp or false then [ tokio_udp_0_1_3 ] else []))
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.tokio_0_1_19.tokio-uds or false then [ tokio_uds_0_2_5 ] else [])) else []);
    features = mkFeatures (features.tokio_0_1_19 or {});
  };
  tokio_0_1_19_features = f: updateFeatures f (rec {
    bytes_0_4_12.default = true;
    futures_0_1_26.default = true;
    mio_0_6_16.default = true;
    num_cpus_1_10_0.default = true;
    tokio_0_1_19.bytes =
      (f.tokio_0_1_19.bytes or false) ||
      (f.tokio_0_1_19.io or false) ||
      (tokio_0_1_19.io or false);
    tokio_0_1_19.codec =
      (f.tokio_0_1_19.codec or false) ||
      (f.tokio_0_1_19.default or false) ||
      (tokio_0_1_19.default or false);
    tokio_0_1_19.default = (f.tokio_0_1_19.default or true);
    tokio_0_1_19.fs =
      (f.tokio_0_1_19.fs or false) ||
      (f.tokio_0_1_19.default or false) ||
      (tokio_0_1_19.default or false);
    tokio_0_1_19.io =
      (f.tokio_0_1_19.io or false) ||
      (f.tokio_0_1_19.codec or false) ||
      (tokio_0_1_19.codec or false) ||
      (f.tokio_0_1_19.default or false) ||
      (tokio_0_1_19.default or false) ||
      (f.tokio_0_1_19.reactor or false) ||
      (tokio_0_1_19.reactor or false);
    tokio_0_1_19.mio =
      (f.tokio_0_1_19.mio or false) ||
      (f.tokio_0_1_19.reactor or false) ||
      (tokio_0_1_19.reactor or false);
    tokio_0_1_19.num_cpus =
      (f.tokio_0_1_19.num_cpus or false) ||
      (f.tokio_0_1_19.rt-full or false) ||
      (tokio_0_1_19.rt-full or false);
    tokio_0_1_19.reactor =
      (f.tokio_0_1_19.reactor or false) ||
      (f.tokio_0_1_19.default or false) ||
      (tokio_0_1_19.default or false) ||
      (f.tokio_0_1_19.rt-full or false) ||
      (tokio_0_1_19.rt-full or false);
    tokio_0_1_19.rt-full =
      (f.tokio_0_1_19.rt-full or false) ||
      (f.tokio_0_1_19.default or false) ||
      (tokio_0_1_19.default or false);
    tokio_0_1_19.sync =
      (f.tokio_0_1_19.sync or false) ||
      (f.tokio_0_1_19.default or false) ||
      (tokio_0_1_19.default or false);
    tokio_0_1_19.tcp =
      (f.tokio_0_1_19.tcp or false) ||
      (f.tokio_0_1_19.default or false) ||
      (tokio_0_1_19.default or false);
    tokio_0_1_19.timer =
      (f.tokio_0_1_19.timer or false) ||
      (f.tokio_0_1_19.default or false) ||
      (tokio_0_1_19.default or false) ||
      (f.tokio_0_1_19.rt-full or false) ||
      (tokio_0_1_19.rt-full or false);
    tokio_0_1_19.tokio-codec =
      (f.tokio_0_1_19.tokio-codec or false) ||
      (f.tokio_0_1_19.codec or false) ||
      (tokio_0_1_19.codec or false);
    tokio_0_1_19.tokio-current-thread =
      (f.tokio_0_1_19.tokio-current-thread or false) ||
      (f.tokio_0_1_19.rt-full or false) ||
      (tokio_0_1_19.rt-full or false);
    tokio_0_1_19.tokio-executor =
      (f.tokio_0_1_19.tokio-executor or false) ||
      (f.tokio_0_1_19.rt-full or false) ||
      (tokio_0_1_19.rt-full or false);
    tokio_0_1_19.tokio-fs =
      (f.tokio_0_1_19.tokio-fs or false) ||
      (f.tokio_0_1_19.fs or false) ||
      (tokio_0_1_19.fs or false);
    tokio_0_1_19.tokio-io =
      (f.tokio_0_1_19.tokio-io or false) ||
      (f.tokio_0_1_19.io or false) ||
      (tokio_0_1_19.io or false);
    tokio_0_1_19.tokio-reactor =
      (f.tokio_0_1_19.tokio-reactor or false) ||
      (f.tokio_0_1_19.reactor or false) ||
      (tokio_0_1_19.reactor or false);
    tokio_0_1_19.tokio-sync =
      (f.tokio_0_1_19.tokio-sync or false) ||
      (f.tokio_0_1_19.sync or false) ||
      (tokio_0_1_19.sync or false);
    tokio_0_1_19.tokio-tcp =
      (f.tokio_0_1_19.tokio-tcp or false) ||
      (f.tokio_0_1_19.tcp or false) ||
      (tokio_0_1_19.tcp or false);
    tokio_0_1_19.tokio-threadpool =
      (f.tokio_0_1_19.tokio-threadpool or false) ||
      (f.tokio_0_1_19.rt-full or false) ||
      (tokio_0_1_19.rt-full or false);
    tokio_0_1_19.tokio-timer =
      (f.tokio_0_1_19.tokio-timer or false) ||
      (f.tokio_0_1_19.timer or false) ||
      (tokio_0_1_19.timer or false);
    tokio_0_1_19.tokio-trace-core =
      (f.tokio_0_1_19.tokio-trace-core or false) ||
      (f.tokio_0_1_19.rt-full or false) ||
      (tokio_0_1_19.rt-full or false);
    tokio_0_1_19.tokio-udp =
      (f.tokio_0_1_19.tokio-udp or false) ||
      (f.tokio_0_1_19.udp or false) ||
      (tokio_0_1_19.udp or false);
    tokio_0_1_19.tokio-uds =
      (f.tokio_0_1_19.tokio-uds or false) ||
      (f.tokio_0_1_19.uds or false) ||
      (tokio_0_1_19.uds or false);
    tokio_0_1_19.udp =
      (f.tokio_0_1_19.udp or false) ||
      (f.tokio_0_1_19.default or false) ||
      (tokio_0_1_19.default or false);
    tokio_0_1_19.uds =
      (f.tokio_0_1_19.uds or false) ||
      (f.tokio_0_1_19.default or false) ||
      (tokio_0_1_19.default or false);
    tokio_codec_0_1_1.default = true;
    tokio_current_thread_0_1_6.default = true;
    tokio_executor_0_1_7.default = true;
    tokio_fs_0_1_6.default = true;
    tokio_io_0_1_12.default = true;
    tokio_reactor_0_1_9.default = true;
    tokio_sync_0_1_5.default = true;
    tokio_tcp_0_1_3.default = true;
    tokio_threadpool_0_1_14.default = true;
    tokio_timer_0_2_10.default = true;
    tokio_trace_core_0_1_0.default = true;
    tokio_udp_0_1_3.default = true;
    tokio_uds_0_2_5.default = true;
  }) [ bytes_0_4_12_features futures_0_1_26_features mio_0_6_16_features num_cpus_1_10_0_features tokio_codec_0_1_1_features tokio_current_thread_0_1_6_features tokio_executor_0_1_7_features tokio_fs_0_1_6_features tokio_io_0_1_12_features tokio_reactor_0_1_9_features tokio_sync_0_1_5_features tokio_tcp_0_1_3_features tokio_threadpool_0_1_14_features tokio_timer_0_2_10_features tokio_trace_core_0_1_0_features tokio_udp_0_1_3_features tokio_uds_0_2_5_features ];
  tokio_codec_0_1_1 = { features?(tokio_codec_0_1_1_features {}) }: tokio_codec_0_1_1_ {
    dependencies = mapFeatures features ([ bytes_0_4_12 futures_0_1_26 tokio_io_0_1_12 ]);
  };
  tokio_codec_0_1_1_features = f: updateFeatures f (rec {
    bytes_0_4_12.default = true;
    futures_0_1_26.default = true;
    tokio_codec_0_1_1.default = (f.tokio_codec_0_1_1.default or true);
    tokio_io_0_1_12.default = true;
  }) [ bytes_0_4_12_features futures_0_1_26_features tokio_io_0_1_12_features ];
  tokio_core_0_1_17 = { features?(tokio_core_0_1_17_features {}) }: tokio_core_0_1_17_ {
    dependencies = mapFeatures features ([ bytes_0_4_12 futures_0_1_26 iovec_0_1_2 log_0_4_6 mio_0_6_16 scoped_tls_0_1_2 tokio_0_1_19 tokio_executor_0_1_7 tokio_io_0_1_12 tokio_reactor_0_1_9 tokio_timer_0_2_10 ]);
  };
  tokio_core_0_1_17_features = f: updateFeatures f (rec {
    bytes_0_4_12.default = true;
    futures_0_1_26.default = true;
    iovec_0_1_2.default = true;
    log_0_4_6.default = true;
    mio_0_6_16.default = true;
    scoped_tls_0_1_2.default = true;
    tokio_0_1_19.default = true;
    tokio_core_0_1_17.default = (f.tokio_core_0_1_17.default or true);
    tokio_executor_0_1_7.default = true;
    tokio_io_0_1_12.default = true;
    tokio_reactor_0_1_9.default = true;
    tokio_timer_0_2_10.default = true;
  }) [ bytes_0_4_12_features futures_0_1_26_features iovec_0_1_2_features log_0_4_6_features mio_0_6_16_features scoped_tls_0_1_2_features tokio_0_1_19_features tokio_executor_0_1_7_features tokio_io_0_1_12_features tokio_reactor_0_1_9_features tokio_timer_0_2_10_features ];
  tokio_current_thread_0_1_6 = { features?(tokio_current_thread_0_1_6_features {}) }: tokio_current_thread_0_1_6_ {
    dependencies = mapFeatures features ([ futures_0_1_26 tokio_executor_0_1_7 ]);
  };
  tokio_current_thread_0_1_6_features = f: updateFeatures f (rec {
    futures_0_1_26.default = true;
    tokio_current_thread_0_1_6.default = (f.tokio_current_thread_0_1_6.default or true);
    tokio_executor_0_1_7.default = true;
  }) [ futures_0_1_26_features tokio_executor_0_1_7_features ];
  tokio_executor_0_1_7 = { features?(tokio_executor_0_1_7_features {}) }: tokio_executor_0_1_7_ {
    dependencies = mapFeatures features ([ crossbeam_utils_0_6_5 futures_0_1_26 ]);
  };
  tokio_executor_0_1_7_features = f: updateFeatures f (rec {
    crossbeam_utils_0_6_5.default = true;
    futures_0_1_26.default = true;
    tokio_executor_0_1_7.default = (f.tokio_executor_0_1_7.default or true);
  }) [ crossbeam_utils_0_6_5_features futures_0_1_26_features ];
  tokio_fs_0_1_6 = { features?(tokio_fs_0_1_6_features {}) }: tokio_fs_0_1_6_ {
    dependencies = mapFeatures features ([ futures_0_1_26 tokio_io_0_1_12 tokio_threadpool_0_1_14 ]);
  };
  tokio_fs_0_1_6_features = f: updateFeatures f (rec {
    futures_0_1_26.default = true;
    tokio_fs_0_1_6.default = (f.tokio_fs_0_1_6.default or true);
    tokio_io_0_1_12.default = true;
    tokio_threadpool_0_1_14.default = true;
  }) [ futures_0_1_26_features tokio_io_0_1_12_features tokio_threadpool_0_1_14_features ];
  tokio_io_0_1_12 = { features?(tokio_io_0_1_12_features {}) }: tokio_io_0_1_12_ {
    dependencies = mapFeatures features ([ bytes_0_4_12 futures_0_1_26 log_0_4_6 ]);
  };
  tokio_io_0_1_12_features = f: updateFeatures f (rec {
    bytes_0_4_12.default = true;
    futures_0_1_26.default = true;
    log_0_4_6.default = true;
    tokio_io_0_1_12.default = (f.tokio_io_0_1_12.default or true);
  }) [ bytes_0_4_12_features futures_0_1_26_features log_0_4_6_features ];
  tokio_process_0_2_3 = { features?(tokio_process_0_2_3_features {}) }: tokio_process_0_2_3_ {
    dependencies = mapFeatures features ([ futures_0_1_26 mio_0_6_16 tokio_io_0_1_12 tokio_reactor_0_1_9 ])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_53 tokio_signal_0_2_7 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ mio_named_pipes_0_1_6 winapi_0_3_7 ]) else []);
  };
  tokio_process_0_2_3_features = f: updateFeatures f (rec {
    futures_0_1_26.default = true;
    libc_0_2_53.default = true;
    mio_0_6_16.default = true;
    mio_named_pipes_0_1_6.default = true;
    tokio_io_0_1_12.default = true;
    tokio_process_0_2_3.default = (f.tokio_process_0_2_3.default or true);
    tokio_reactor_0_1_9.default = true;
    tokio_signal_0_2_7.default = true;
    winapi_0_3_7.default = true;
    winapi_0_3_7.handleapi = true;
    winapi_0_3_7.minwindef = true;
    winapi_0_3_7.processthreadsapi = true;
    winapi_0_3_7.synchapi = true;
    winapi_0_3_7.threadpoollegacyapiset = true;
    winapi_0_3_7.winbase = true;
    winapi_0_3_7.winerror = true;
    winapi_0_3_7.winnt = true;
  }) [ futures_0_1_26_features mio_0_6_16_features tokio_io_0_1_12_features tokio_reactor_0_1_9_features libc_0_2_53_features tokio_signal_0_2_7_features mio_named_pipes_0_1_6_features winapi_0_3_7_features ];
  tokio_reactor_0_1_9 = { features?(tokio_reactor_0_1_9_features {}) }: tokio_reactor_0_1_9_ {
    dependencies = mapFeatures features ([ crossbeam_utils_0_6_5 futures_0_1_26 lazy_static_1_3_0 log_0_4_6 mio_0_6_16 num_cpus_1_10_0 parking_lot_0_7_1 slab_0_4_2 tokio_executor_0_1_7 tokio_io_0_1_12 tokio_sync_0_1_5 ]);
  };
  tokio_reactor_0_1_9_features = f: updateFeatures f (rec {
    crossbeam_utils_0_6_5.default = true;
    futures_0_1_26.default = true;
    lazy_static_1_3_0.default = true;
    log_0_4_6.default = true;
    mio_0_6_16.default = true;
    num_cpus_1_10_0.default = true;
    parking_lot_0_7_1.default = true;
    slab_0_4_2.default = true;
    tokio_executor_0_1_7.default = true;
    tokio_io_0_1_12.default = true;
    tokio_reactor_0_1_9.default = (f.tokio_reactor_0_1_9.default or true);
    tokio_sync_0_1_5.default = true;
  }) [ crossbeam_utils_0_6_5_features futures_0_1_26_features lazy_static_1_3_0_features log_0_4_6_features mio_0_6_16_features num_cpus_1_10_0_features parking_lot_0_7_1_features slab_0_4_2_features tokio_executor_0_1_7_features tokio_io_0_1_12_features tokio_sync_0_1_5_features ];
  tokio_signal_0_2_7 = { features?(tokio_signal_0_2_7_features {}) }: tokio_signal_0_2_7_ {
    dependencies = mapFeatures features ([ futures_0_1_26 mio_0_6_16 tokio_executor_0_1_7 tokio_io_0_1_12 tokio_reactor_0_1_9 ])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_53 mio_uds_0_6_7 signal_hook_0_1_9 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_7 ]) else []);
  };
  tokio_signal_0_2_7_features = f: updateFeatures f (rec {
    futures_0_1_26.default = true;
    libc_0_2_53.default = true;
    mio_0_6_16.default = true;
    mio_uds_0_6_7.default = true;
    signal_hook_0_1_9.default = true;
    tokio_executor_0_1_7.default = true;
    tokio_io_0_1_12.default = true;
    tokio_reactor_0_1_9.default = true;
    tokio_signal_0_2_7.default = (f.tokio_signal_0_2_7.default or true);
    winapi_0_3_7.default = true;
    winapi_0_3_7.minwindef = true;
    winapi_0_3_7.wincon = true;
  }) [ futures_0_1_26_features mio_0_6_16_features tokio_executor_0_1_7_features tokio_io_0_1_12_features tokio_reactor_0_1_9_features libc_0_2_53_features mio_uds_0_6_7_features signal_hook_0_1_9_features winapi_0_3_7_features ];
  tokio_sync_0_1_5 = { features?(tokio_sync_0_1_5_features {}) }: tokio_sync_0_1_5_ {
    dependencies = mapFeatures features ([ fnv_1_0_6 futures_0_1_26 ]);
  };
  tokio_sync_0_1_5_features = f: updateFeatures f (rec {
    fnv_1_0_6.default = true;
    futures_0_1_26.default = true;
    tokio_sync_0_1_5.default = (f.tokio_sync_0_1_5.default or true);
  }) [ fnv_1_0_6_features futures_0_1_26_features ];
  tokio_tcp_0_1_3 = { features?(tokio_tcp_0_1_3_features {}) }: tokio_tcp_0_1_3_ {
    dependencies = mapFeatures features ([ bytes_0_4_12 futures_0_1_26 iovec_0_1_2 mio_0_6_16 tokio_io_0_1_12 tokio_reactor_0_1_9 ]);
  };
  tokio_tcp_0_1_3_features = f: updateFeatures f (rec {
    bytes_0_4_12.default = true;
    futures_0_1_26.default = true;
    iovec_0_1_2.default = true;
    mio_0_6_16.default = true;
    tokio_io_0_1_12.default = true;
    tokio_reactor_0_1_9.default = true;
    tokio_tcp_0_1_3.default = (f.tokio_tcp_0_1_3.default or true);
  }) [ bytes_0_4_12_features futures_0_1_26_features iovec_0_1_2_features mio_0_6_16_features tokio_io_0_1_12_features tokio_reactor_0_1_9_features ];
  tokio_threadpool_0_1_14 = { features?(tokio_threadpool_0_1_14_features {}) }: tokio_threadpool_0_1_14_ {
    dependencies = mapFeatures features ([ crossbeam_deque_0_7_1 crossbeam_queue_0_1_2 crossbeam_utils_0_6_5 futures_0_1_26 log_0_4_6 num_cpus_1_10_0 rand_0_6_5 slab_0_4_2 tokio_executor_0_1_7 ]);
  };
  tokio_threadpool_0_1_14_features = f: updateFeatures f (rec {
    crossbeam_deque_0_7_1.default = true;
    crossbeam_queue_0_1_2.default = true;
    crossbeam_utils_0_6_5.default = true;
    futures_0_1_26.default = true;
    log_0_4_6.default = true;
    num_cpus_1_10_0.default = true;
    rand_0_6_5.default = true;
    slab_0_4_2.default = true;
    tokio_executor_0_1_7.default = true;
    tokio_threadpool_0_1_14.default = (f.tokio_threadpool_0_1_14.default or true);
  }) [ crossbeam_deque_0_7_1_features crossbeam_queue_0_1_2_features crossbeam_utils_0_6_5_features futures_0_1_26_features log_0_4_6_features num_cpus_1_10_0_features rand_0_6_5_features slab_0_4_2_features tokio_executor_0_1_7_features ];
  tokio_timer_0_2_10 = { features?(tokio_timer_0_2_10_features {}) }: tokio_timer_0_2_10_ {
    dependencies = mapFeatures features ([ crossbeam_utils_0_6_5 futures_0_1_26 slab_0_4_2 tokio_executor_0_1_7 ]);
  };
  tokio_timer_0_2_10_features = f: updateFeatures f (rec {
    crossbeam_utils_0_6_5.default = true;
    futures_0_1_26.default = true;
    slab_0_4_2.default = true;
    tokio_executor_0_1_7.default = true;
    tokio_timer_0_2_10.default = (f.tokio_timer_0_2_10.default or true);
  }) [ crossbeam_utils_0_6_5_features futures_0_1_26_features slab_0_4_2_features tokio_executor_0_1_7_features ];
  tokio_trace_core_0_1_0 = { features?(tokio_trace_core_0_1_0_features {}) }: tokio_trace_core_0_1_0_ {
    dependencies = mapFeatures features ([ lazy_static_1_3_0 ]);
  };
  tokio_trace_core_0_1_0_features = f: updateFeatures f (rec {
    lazy_static_1_3_0.default = true;
    tokio_trace_core_0_1_0.default = (f.tokio_trace_core_0_1_0.default or true);
  }) [ lazy_static_1_3_0_features ];
  tokio_udp_0_1_3 = { features?(tokio_udp_0_1_3_features {}) }: tokio_udp_0_1_3_ {
    dependencies = mapFeatures features ([ bytes_0_4_12 futures_0_1_26 log_0_4_6 mio_0_6_16 tokio_codec_0_1_1 tokio_io_0_1_12 tokio_reactor_0_1_9 ]);
  };
  tokio_udp_0_1_3_features = f: updateFeatures f (rec {
    bytes_0_4_12.default = true;
    futures_0_1_26.default = true;
    log_0_4_6.default = true;
    mio_0_6_16.default = true;
    tokio_codec_0_1_1.default = true;
    tokio_io_0_1_12.default = true;
    tokio_reactor_0_1_9.default = true;
    tokio_udp_0_1_3.default = (f.tokio_udp_0_1_3.default or true);
  }) [ bytes_0_4_12_features futures_0_1_26_features log_0_4_6_features mio_0_6_16_features tokio_codec_0_1_1_features tokio_io_0_1_12_features tokio_reactor_0_1_9_features ];
  tokio_uds_0_2_5 = { features?(tokio_uds_0_2_5_features {}) }: tokio_uds_0_2_5_ {
    dependencies = mapFeatures features ([ bytes_0_4_12 futures_0_1_26 iovec_0_1_2 libc_0_2_53 log_0_4_6 mio_0_6_16 mio_uds_0_6_7 tokio_codec_0_1_1 tokio_io_0_1_12 tokio_reactor_0_1_9 ]);
  };
  tokio_uds_0_2_5_features = f: updateFeatures f (rec {
    bytes_0_4_12.default = true;
    futures_0_1_26.default = true;
    iovec_0_1_2.default = true;
    libc_0_2_53.default = true;
    log_0_4_6.default = true;
    mio_0_6_16.default = true;
    mio_uds_0_6_7.default = true;
    tokio_codec_0_1_1.default = true;
    tokio_io_0_1_12.default = true;
    tokio_reactor_0_1_9.default = true;
    tokio_uds_0_2_5.default = (f.tokio_uds_0_2_5.default or true);
  }) [ bytes_0_4_12_features futures_0_1_26_features iovec_0_1_2_features libc_0_2_53_features log_0_4_6_features mio_0_6_16_features mio_uds_0_6_7_features tokio_codec_0_1_1_features tokio_io_0_1_12_features tokio_reactor_0_1_9_features ];
  winapi_0_2_8 = { features?(winapi_0_2_8_features {}) }: winapi_0_2_8_ {};
  winapi_0_2_8_features = f: updateFeatures f (rec {
    winapi_0_2_8.default = (f.winapi_0_2_8.default or true);
  }) [];
  winapi_0_3_7 = { features?(winapi_0_3_7_features {}) }: winapi_0_3_7_ {
    dependencies = (if kernel == "i686-pc-windows-gnu" then mapFeatures features ([ winapi_i686_pc_windows_gnu_0_4_0 ]) else [])
      ++ (if kernel == "x86_64-pc-windows-gnu" then mapFeatures features ([ winapi_x86_64_pc_windows_gnu_0_4_0 ]) else []);
    features = mkFeatures (features.winapi_0_3_7 or {});
  };
  winapi_0_3_7_features = f: updateFeatures f (rec {
    winapi_0_3_7.default = (f.winapi_0_3_7.default or true);
    winapi_0_3_7.impl-debug =
      (f.winapi_0_3_7.impl-debug or false) ||
      (f.winapi_0_3_7.debug or false) ||
      (winapi_0_3_7.debug or false);
    winapi_i686_pc_windows_gnu_0_4_0.default = true;
    winapi_x86_64_pc_windows_gnu_0_4_0.default = true;
  }) [ winapi_i686_pc_windows_gnu_0_4_0_features winapi_x86_64_pc_windows_gnu_0_4_0_features ];
  winapi_build_0_1_1 = { features?(winapi_build_0_1_1_features {}) }: winapi_build_0_1_1_ {};
  winapi_build_0_1_1_features = f: updateFeatures f (rec {
    winapi_build_0_1_1.default = (f.winapi_build_0_1_1.default or true);
  }) [];
  winapi_i686_pc_windows_gnu_0_4_0 = { features?(winapi_i686_pc_windows_gnu_0_4_0_features {}) }: winapi_i686_pc_windows_gnu_0_4_0_ {};
  winapi_i686_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_i686_pc_windows_gnu_0_4_0.default = (f.winapi_i686_pc_windows_gnu_0_4_0.default or true);
  }) [];
  winapi_x86_64_pc_windows_gnu_0_4_0 = { features?(winapi_x86_64_pc_windows_gnu_0_4_0_features {}) }: winapi_x86_64_pc_windows_gnu_0_4_0_ {};
  winapi_x86_64_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_x86_64_pc_windows_gnu_0_4_0.default = (f.winapi_x86_64_pc_windows_gnu_0_4_0.default or true);
  }) [];
  ws2_32_sys_0_2_1 = { features?(ws2_32_sys_0_2_1_features {}) }: ws2_32_sys_0_2_1_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  ws2_32_sys_0_2_1_features = f: updateFeatures f (rec {
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
    ws2_32_sys_0_2_1.default = (f.ws2_32_sys_0_2_1.default or true);
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
}
