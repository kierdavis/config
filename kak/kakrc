# Complete using tab key.
hook global InsertCompletionShow .* %{
  try %{
    # this command temporarily removes cursors preceded by whitespace;
    # if there are no cursors left, it raises an error, does not
    # continue to execute the mapping commands, and the error is eaten
    # by the `try` command so no warning appears.
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
  }
}
hook global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <s-tab> <c-p>
}

# Indent using tab key.
hook global InsertChar \t %{ try %{
  execute-keys -draft "hd<a-gt>"
}}

# Key binding for duplicating current line.
map global normal D ':execute-keys -draft xyP<ret>'

# Display tab characters as 2 chars wide, rather than the default 8.
set-option global tabstop 2

# Highlight invalid indentation.
hook global BufSetOption indentwidth=(.*) %{
  add-highlighter -override buffer/wrong-indentation regex %sh{if [[ "$kak_opt_indentwidth" -eq 0 ]]; then echo -n '^\h* \h*'; else echo -n '^\h*\t\h*'; fi} 0:Error
}

# Default indentation.
set-option global indentwidth 2
hook global BufSetOption filetype=(cue|go|makefile) %{
  set-option buffer indentwidth 0
}
hook global BufCreate (.*/)?go\.mod %{
  set-option buffer indentwidth 0
}

# Highlight trailing whitespace in an "error" colour.
add-highlighter global/trailing-whitespace regex '\h+$' 0:Error

# Command to remove all trailing whitespace.
define-command -override tidy-ws %{
  execute-keys -draft '%s\h+$<ret><a-d>'
}

# Additional filetype detection rules.
hook global BufCreate (.*/)?Containerfile(\..+)?$ %{
  set-option buffer filetype dockerfile
}
hook global BufCreate (.*/)?[mM]akefile\.[^/]+ %{
  set-option buffer filetype makefile
}
hook global BufCreate .*\.pyi %{
  set-option buffer filetype python
}

# Disable weird autocomplete behaviour.
hook global WinSetOption filetype=lua %{
  remove-hooks window lua-insert
}

# Terraform: copy previous line's indentation on new line
# (based on /usr/share/kak/rc/filetype/go.kak).
define-command -hidden terraform-indent-on-new-line %<
  evaluate-commands -draft -itersel %<
    # Preserve previous line indent.
    try %{ execute-keys -draft <semicolon>K<a-&> }
    # Indent after line with an unclosed (, [ or {
    try %< execute-keys -draft [c[(\[{],[)\]}] <ret> <a-k> \A[(\[{][^\n]*\n[^\n]*\n?\z <ret> j<a-gt> >
    # Deindent closing brace/bracket when after cursor.
    try %< execute-keys -draft x <a-k> ^\h*[)\]}] <ret> gh / [)\]}] <ret> m <a-S> 1<a-&> >
  >
>
define-command -hidden terraform-indent-on-closing-delim %<
  # align to opening delimeter when alone on a line
  try %< execute-keys -itersel -draft <a-h><a-k>^\h+[)\]}]$<ret>hms\A|.\z<ret>1<a-&> >
>
hook global WinSetOption filetype=terraform %<
  hook window InsertChar \n -group terraform-indent terraform-indent-on-new-line
  hook window InsertChar \} -group terraform-indent terraform-indent-on-closing-delim
  hook -once -always window WinSetOption filetype=.* %{ remove-hooks window terraform-.+ }
>

# fzf (fuzzy finder) plugin.
source "%val{config}/thirdparty/fzf.kak/rc/fzf.kak"
source "%val{config}/thirdparty/fzf.kak/rc/modules/fzf-file.kak"
source "%val{config}/thirdparty/fzf.kak/rc/modules/fzf-buffer.kak"
source "%val{config}/thirdparty/fzf.kak/rc/modules/fzf-search.kak"
source "%val{config}/thirdparty/fzf.kak/rc/modules/fzf-cd.kak"
map global normal <c-p> ': fzf-mode<ret>'
